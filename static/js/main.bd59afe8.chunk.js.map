{"version":3,"sources":["assets/bull.png","assets/1pondo.png","components/Background.js","helpers/graphQlQueries.js","web3.js","helpers/transaction.js","components/Header.js","helpers/currency.js","components/Home.js","components/ProgressBar.js","helpers/proposals.js","components/ProposalDetail.js","components/MemberDetail.js","helpers/address.js","components/MemberList.js","components/Pool.js","components/PoolMemberList.js","components/ProposalList.js","components/ProposalSubmission.js","components/Wrapper.js","resolvers.js","schema.js","App.js","index.js","assets/hood.png"],"names":["module","exports","Background","id","className","gql","moloch","molochPool","token","medianizer","eth","GET_METADATA","GET_MEMBER_DETAIL","GET_POOL_MEMBER_DETAIL","GET_MEMBERS","molochAbi","require","molochPoolAbi","erc20Abi","medianizerAbi","initWeb3","client","loggedInUser","a","localStorage","getItem","initGnosisSafe","initMetamask","checkNetwork","getNetwork","network","console","log","chainId","alert","window","ethereum","web3","coinbase","enable","web3Provider","currentProvider","ethers","providers","Web3Provider","setItem","listAccounts","toLowerCase","writeData","data","provider","SafeProvider","rpcUrl","process","getEthSigner","Error","initMoloch","Contract","getSigner","getDefaultProvider","initMolochPool","initToken","initMedianizer","getMoloch","getMolochPool","getToken","getMedianizer","monitorTx","txPromise","toastProvider","addMessage","then","tx","removeMessage","secondaryMessage","actionHref","hash","actionText","variant","wait","catch","e","MainMenuWrapped","withApollo","_handleOpenDropdown","onLoadApproveWeth","member","_handleCloseDropdown","onLoadChangeDelegateKey","onLoadWithdrawLootToken","onLoadWithdrawPoolToken","poolMember","Dropdown","Item","icon","content","onClick","Divider","isActive","to","Icon","name","shares","resetStore","location","reload","ChangeDelegateKeyMenu","onLoadMain","useState","newDelegateKey","setNewDelegateKey","submitChangeDelegateKey","useCallback","updateDelegateKey","Form","Input","placeholder","onChange","event","target","value","Button","WithdrawLootTokenMenu","ragequitAmount","setRagequitAmount","submitRagequit","ragequit","WithdrawPoolTokenMenu","pool","withdrawAmount","setWithdrawAmount","submitPoolWithdraw","withdraw","ApproveWethMenu","approval","setApproval","wrap","setWrap","unwrap","setUnwrap","myWeth","setMyWeth","myEth","setMyEth","approve","utils","parseEther","toString","approvePool","wrapEth","deposit","unwrapWeth","useEffect","balanceOf","weth","parseFloat","formatEther","toFixed","fetchMyWeth","getBalance","fetchMyEth","Group","GET_POOL_MEMBER","visibleRightMenu","setVisibleRightMenu","visibleMenu","setVisibleMenu","setMoloch","setToken","setEth","setPool","init","logIn","method","molochInstance","useQuery","variables","address","memberLoading","loading","memberError","error","memberData","poolLoading","poolError","poolMemberData","Loader","active","Grid","columns","stackable","verticalAlign","Column","textAlign","href","rel","size","open","onBlur","onFocus","text","substring","Menu","direction","topRightMenuContent","getTopRightMenuContent","currencyFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","convertWeiToDollars","weiAmount","exchangeRate","weitoEth","exchWeiToEth","format","getShareValue","totalShares","totalValue","bigNumberify","gt","div","Home","guildBankValue","shareValue","poolValue","container","Row","Image","src","logo","doubling","Statistic","inverted","Label","Value","label","class","ProgressBar","yes","no","total","parseInt","percentYes","Math","round","percentNo","position","Progress","percent","color","top","width","floated","PERIOD_DURATION","ProposalStatus","Unknown","InQueue","VotingPeriod","GracePeriod","Aborted","Passed","Failed","ReadyForProcessing","periodsToTime","periods","seconds","days","floor","hours","minutes","string","getProposalCountdownText","proposal","status","votingStarts","votingEnds","gracePeriod","inQueue","currentPeriod","startingPeriod","inGracePeriod","inVotingPeriod","passedVotingAndGrace","Vote","MemberAvatar","mobile","tablet","computer","title","hood","centered","length","GET_PROPOSAL_DETAIL","ProposalDetail","match","m","handleNo","submitVote","proposalIndex","handleYes","handleProcess","processProposal","params","delegateKey","members","user","userHasVoted","votes","find","vote","cannotVote","aborted","properties","description","divided","applicantAddress","displayFull","memberAddress","url","host","Segment","tokenTribute","sharesRequested","mul","map","idx","key","yesShares","noShares","disabled","GET_MEMBER_VOTES","MemberDetail","bull","proposals","fontSize","p","Fragment","pathname","uintVote","circular","empty","Date","timestamp","toISOString","slice","as","MemberDetailView","noTheme","LoggedInUser","GET_ELDERS","Elders","elder","GET_NON_ELDERS","Contributors","contributor","MemberList","props","paddingLeft","MemberListView","higherProps","exact","path","render","NumMembers","fluid","Donate","donation","setDonation","donate","Modal","trigger","basic","closeIcon","Content","labelPosition","EtherSymbol","Actions","Sync","lastProcessedProposalIndex","currentPoolIndex","synced","Popup","compact","sync","GET_POOL_METADATA","Pool","setMolochPool","t","fetchData","lastProcessedProposal","poolMetas","poolMeta","totalPoolShares","disablePool","poolShareValue","GET_POOL_MEMBERS","PoolMemberList","poolMembers","PoolMemberListView","ProposalCard","GET_COMPLETED_PROPOSAL_LIST","GET_ACTIVE_PROPOSAL_LIST","finishedLoadingRecords","ProposalList","offset","limit","notifyOnNetworkStatusChange","completedLoading","completedError","completedData","completedFetchMore","fetchMore","completedProposals","updateQuery","prev","fetchMoreResult","Object","assign","sortProposals","b","filter","sort","votingPeriod","readyForProcessing","panes","menuItem","Tab","Pane","attached","index","menu","secondary","pointing","GET_MEMBER_BY_DELEGATE_KEY","ProposalListView","DEPOSIT_WETH","SubmitModal","state","beneficiaryApproved","depositApproved","handleOpen","tribute","valid","setState","allowance","beneficiaryAllowance","gte","depositAllowance","handleClose","this","handleSubmit","submittedTx","List","Component","ProposalSubmission","fieldValidationErrors","assets","titleValid","descriptionValid","tributeValid","sharesValid","addressValid","formValid","validateField","fieldName","isHexString","validateForm","handleInput","JSON","stringify","submitProposal","stretched","transparent","type","TextArea","rows","Wrapper","children","resolvers","Query","getCurrentPeriod","period","compute","rate","proposalQueueLength","getProposalQueueLength","Proposal","_args","processed","didPass","determineProposalStatus","cache","readQuery","query","details","parse","Mutation","setAttributes","_","fragment","readFragment","typeDefs","InMemoryCache","ApolloClient","link","HttpLink","uri","connectToDevTools","onResetStore","IS_LOGGED_IN","BottomMenu","menuSize","handleOnScreenUpdated","viewportWidth","innerWidth","document","documentElement","clientWidth","prevState","Responsive","onUpdate","fixed","widths","Container","Link","header","React","Routes","Dimmer","Header","component","Provider","ref","node","App","restored","setRestored","basename","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.bd59afe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bull.204229a6.png\";","module.exports = __webpack_public_path__ + \"static/media/1pondo.6e945499.png\";","import React from \"react\";\n\nconst Background = () => (\n  <div id=\"background\">\n    <div className=\"blurred_image\" />\n    <div className=\"dark_overlay\" />\n  </div>\n);\n\nexport default Background;\n","import gql from \"graphql-tag\";\n\nexport const GET_EXCHANGE_RATE = gql`\n  query ExchangeRate {\n    exchangeRate @client\n  }\n`;\n\nexport const GET_TOTAL_SHARES = gql`\n  query TotalShares {\n    totalShares @client\n  }\n`;\n\nexport const GET_GUILD_BANK_VALUE = gql`\n  query GuildBankValue {\n    guildBankValue @client\n  }\n`;\n\nexport const GET_SHARE_VALUE = gql`\n  query ShareValue {\n    shareValue @client\n  }\n`;\n\nexport const GET_CURRENT_PERIOD = gql`\n  query CurrentPeriod {\n    currentPeriod @client\n  }\n`;\n\nexport const GET_METADATA = gql`\n  query Metadata {\n    exchangeRate @client\n    totalShares @client\n    guildBankValue @client\n    currentPeriod @client\n    proposalQueueLength @client\n  }\n`;\n\nexport const GET_POOL_METADATA = gql`\n  query Metadata {\n    totalPoolShares @client\n    poolValue @client\n    exchangeRate @client\n  }\n`;\n\nexport const GET_MEMBER_DETAIL = gql`\n  query Member($address: String!) {\n    member(id: $address) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n    }\n  }\n`;\n\nexport const GET_POOL_MEMBERS = gql`\n  query Metadata {\n    poolMembers(first: 100, orderBy: shares, orderDirection: desc) {\n      id\n      shares\n      keepers\n    }\n  }\n`;\n\nexport const GET_POOL_MEMBER_DETAIL = gql`\n  query PoolMember($address: String!) {\n    poolMember(id: $address) {\n      id\n      shares\n      keepers\n    }\n  }\n`;\n\nexport const GET_MEMBER_BY_DELEGATE_KEY = gql`\n  query Member($delegateKey: String!) {\n    members(where: { delegateKey: $delegateKey }) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n    }\n  }\n`;\n\nexport const GET_MEMBER_DETAIL_WITH_VOTES = gql`\n  query Member($address: String!) {\n    member(id: $address) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n      votes {\n        uintVote\n        proposal {\n          id\n          timestamp\n          tokenTribute\n          sharesRequested\n          processed\n          didPass\n          aborted\n          yesVotes\n          noVotes\n          proposalIndex\n          details\n          status @client\n          title @client\n          description @client\n          gracePeriod @client\n          votingEnds @client\n          votingStarts @client\n          readyForProcessing @client\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_MEMBERS = gql`\n  {\n    members(first: 100, where: { shares_gt: 0, isActive: true }) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n    }\n  }\n`;\n\n// TODO filter this to get current proposals?\nexport const GET_PROPOSALS = gql`\n  {\n    proposals(first: 100) {\n      id\n    }\n  }\n`;\n\nexport const GET_ACTIVE_PROPOSAL_LIST = gql`\n  {\n    proposals(\n      first: 100\n      orderBy: proposalIndex\n      orderDirection: desc\n      where: { processed: false }\n    ) {\n      id\n      timestamp\n      tokenTribute\n      sharesRequested\n      processed\n      didPass\n      aborted\n      yesVotes\n      noVotes\n      proposalIndex\n      votes(first: 100) {\n        member {\n          shares\n        }\n        uintVote\n      }\n      details\n      startingPeriod\n      processed\n      status @client\n      title @client\n      description @client\n      gracePeriod @client\n      votingEnds @client\n      votingStarts @client\n      readyForProcessing @client\n    }\n  }\n`;\n\nexport const GET_COMPLETED_PROPOSAL_LIST = gql`\n  {\n    proposals(\n      first: 100\n      orderBy: proposalIndex\n      orderDirection: desc\n      where: { processed: true }\n    ) {\n      id\n      timestamp\n      tokenTribute\n      sharesRequested\n      processed\n      didPass\n      aborted\n      yesVotes\n      noVotes\n      proposalIndex\n      votes(first: 100) {\n        member {\n          shares\n        }\n        uintVote\n      }\n      details\n      startingPeriod\n      processed\n      status @client\n      title @client\n      description @client\n      gracePeriod @client\n      votingEnds @client\n      votingStarts @client\n      readyForProcessing @client\n    }\n  }\n`;\n\nexport const GET_PROPOSAL_HISTORY = gql`\n  query Proposals($id: String!) {\n    votes(first: 100, where: { memberAddress: $id }) {\n      uintVote\n      proposal {\n        id\n        timestamp\n        tokenTribute\n        sharesRequested\n        processed\n        didPass\n        aborted\n        yesVotes\n        noVotes\n        proposalIndex\n        details\n        startingPeriod\n        processed\n        status @client\n        title @client\n        description @client\n        gracePeriod @client\n        votingEnds @client\n        votingStarts @client\n        readyForProcessing @client\n      }\n    }\n  }\n`;\n\nexport const GET_LAST_PROCESSED = gql`\n  {\n    proposals(first: 1, where: { processed: true }, orderBy: proposalIndex, orderDirection: desc) {\n      proposalIndex\n    }\n  }\n`;\n\nexport const GET_PROPOSAL_DETAIL = gql`\n  query Proposal($id: String!) {\n    proposal(id: $id) {\n      id\n      applicantAddress\n      memberAddress\n      timestamp\n      tokenTribute\n      sharesRequested\n      processed\n      didPass\n      aborted\n      yesVotes\n      noVotes\n      proposalIndex\n      votes(first: 100) {\n        member {\n          id\n          shares\n        }\n        uintVote\n      }\n      details\n      startingPeriod\n      processed\n      status @client\n      title @client\n      description @client\n      gracePeriod @client\n      votingEnds @client\n      votingStarts @client\n      readyForProcessing @client\n    }\n  }\n`;\n\nexport const SET_PROPOSAL_ATTRIBUTES = gql`\n  mutation SetAttributes(\n    $status: String!\n    $title: String!\n    $description: String!\n    $gracePeriod: Number!\n    $votingEnds: Number!\n    $votingStarts: Number!\n    $readyForProcessing: Bool!\n  ) {\n    setAttributes(\n      status: $status\n      title: $title\n      description: $description\n      gracePeriod: $gracePeriod\n      votingEnds: $votingEnds\n      votingStarts: $votingStarts\n      readyForProcessing: $readyForProcessing\n    ) @client {\n      status\n      title\n      description\n      gracePeriod\n      votingEnds\n      votingStarts\n      readyForProcessing\n    }\n  }\n`;\n","import SafeProvider from \"safe-web3-provider\";\nimport { ethers } from \"ethers\";\n\nconst molochAbi = require(\"./abi/Moloch.abi.json\");\nconst molochPoolAbi = require(\"./abi/MolochPool.abi.json\");\nconst erc20Abi = require(\"./abi/Weth.abi.json\");\nconst medianizerAbi = require(\"./abi/Medianizer.abi.json\");\n\nlet moloch;\nlet molochPool;\nlet token;\nlet medianizer;\nlet eth;\n\nexport async function initWeb3(client, loggedInUser) {\n  const loginMethod = localStorage.getItem(\"loginType\");\n  if (loginMethod === \"gnosis\") {\n    await initGnosisSafe(client);\n  } else {\n    await initMetamask(client, loggedInUser);\n  }\n}\n\nasync function checkNetwork(eth) {\n  const network = await eth.getNetwork();\n  console.log(\"network: \", network);\n  if (network.chainId !== 1) {\n    alert(\"Please set Web3 provider to Mainnet and try again.\");\n    return false;\n  }\n  return true;\n}\n\nexport async function initMetamask(client, loggedInUser) {\n  if (!window.ethereum && !window.web3) {\n    // Non-DApp browsers won't work.\n    alert(\"Web3 not detected.\");\n  }\n  let coinbase = \"\";\n  if (window.ethereum) {\n    // Modern DApp browsers need to enable Metamask access.\n    await window.ethereum.enable();\n    let web3Provider = window[\"ethereum\"] || window.web3.currentProvider;\n    eth = new ethers.providers.Web3Provider(web3Provider);\n    if (await checkNetwork(eth)) {\n      localStorage.setItem(\"loginType\", \"metamask\");\n      coinbase = (await eth.listAccounts())[0].toLowerCase();\n    }\n  }\n  if (client && loggedInUser !== coinbase) {\n    client.writeData({\n      data: {\n        loggedInUser: coinbase,\n      },\n    });\n    window.localStorage.setItem(\"loggedInUser\", coinbase);\n  }\n  return eth;\n}\n\nexport async function initGnosisSafe(client) {\n  /**\n   *  Create Safe Provider\n   */\n  const provider = new SafeProvider({\n    // TODO: CHANGE THIS TO INFURA/ALCHEMY\n    rpcUrl: process.env.REACT_APP_ETH_URL,\n  });\n\n  /**\n   *  Create Web3\n   */\n  let coinbase = \"\";\n  eth = new ethers.providers.Web3Provider(provider);\n  if (await checkNetwork(eth)) {\n    localStorage.setItem(\"loginType\", \"gnosis\");\n    coinbase = (await eth.listAccounts())[0].toLowerCase();\n  }\n  client.writeData({\n    data: {\n      loggedInUser: coinbase,\n    },\n  });\n  window.localStorage.setItem(\"loggedInUser\", coinbase);\n}\n\nexport async function getEthSigner() {\n  if (!eth) {\n    if (localStorage.getItem(\"loginType\") === \"metamask\") {\n      eth = await initMetamask();\n    } else if (localStorage.getItem(\"loginType\") === \"gnosis\") {\n      eth = await initGnosisSafe();\n    } else {\n      throw new Error(\"Not logged in with web3.\");\n    }\n  }\n  return eth;\n}\n\nexport async function initMoloch(loggedInUser) {\n  if (loggedInUser) {\n    eth = await getEthSigner();\n    moloch = new ethers.Contract(process.env.REACT_APP_MOLOCH_ADDRESS, molochAbi, eth.getSigner());\n  } else {\n    const provider = ethers.getDefaultProvider();\n    moloch = new ethers.Contract(process.env.REACT_APP_MOLOCH_ADDRESS, molochAbi, provider);\n  }\n  return moloch;\n}\n\nexport async function initMolochPool(loggedInUser) {\n  if (loggedInUser) {\n    eth = await getEthSigner();\n    molochPool = new ethers.Contract(\n      process.env.REACT_APP_MOLOCH_POOL_ADDRESS,\n      molochPoolAbi,\n      eth.getSigner(),\n    );\n  } else {\n    const provider = ethers.getDefaultProvider();\n    molochPool = new ethers.Contract(\n      process.env.REACT_APP_MOLOCH_POOL_ADDRESS,\n      molochPoolAbi,\n      provider,\n    );\n  }\n  return molochPool;\n}\n\nexport async function initToken(loggedInUser) {\n  if (loggedInUser) {\n    eth = await getEthSigner();\n    token = new ethers.Contract(process.env.REACT_APP_TOKEN_ADDRESS, erc20Abi, eth.getSigner());\n  } else {\n    const provider = ethers.getDefaultProvider();\n    token = new ethers.Contract(process.env.REACT_APP_TOKEN_ADDRESS, erc20Abi, provider);\n  }\n  return token;\n}\n\nexport async function initMedianizer() {\n  // pull from mainnet\n  let provider = ethers.getDefaultProvider();\n  medianizer = new ethers.Contract(\n    process.env.REACT_APP_MEDIANIZER_ADDRESS,\n    medianizerAbi,\n    provider,\n  );\n  return medianizer;\n}\n\nexport async function getMoloch(loggedInUser) {\n  await initMoloch(loggedInUser);\n  return moloch;\n}\n\nexport async function getMolochPool(loggedInUser) {\n  await initMolochPool(loggedInUser);\n  return molochPool;\n}\n\nexport async function getToken(loggedInUser) {\n  await initToken(loggedInUser);\n  return token;\n}\n\nexport async function getMedianizer() {\n  if (!medianizer) {\n    await initMedianizer();\n  }\n  return medianizer;\n}\n","export function monitorTx(txPromise) {\n  window.toastProvider.addMessage(\"Confirm transaction using wallet...\");\n  txPromise\n    .then(async tx => {\n      console.log(\"tx: \", tx);\n      window.toastProvider.removeMessage();\n      window.toastProvider.addMessage(\"Transaction submitted!\", {\n        secondaryMessage: \"Check progress on Etherscan\",\n        actionHref: `https://etherscan.io/tx/${tx.hash}`,\n        actionText: \"Check\",\n        variant: \"processing\"\n      });\n      await tx.wait();\n      console.log(\"Tx wait complete\");\n      window.toastProvider.removeMessage();\n      window.toastProvider.addMessage(\"Transaction Confirmed!\", {\n        secondaryMessage: \"View on Etherscan\",\n        actionHref: `https://etherscan.io/tx/${tx.hash}`,\n        actionText: \"View\",\n        variant: \"success\"\n      });\n    })\n    .catch(e => {\n      console.log(\"e: \", e);\n      window.toastProvider.removeMessage();\n      window.toastProvider.addMessage(\"Error\", {\n        secondaryMessage: \"Error occurred while processing transaction. Please try again later.\",\n        variant: \"failure\"\n      });\n    });\n};","import React, { useState, useCallback, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid, Icon, Dropdown, Form, Button, Loader } from \"semantic-ui-react\";\nimport { withApollo, useQuery } from \"react-apollo\";\nimport { GET_MEMBER_DETAIL } from \"../helpers/graphQlQueries\";\nimport {\n  getMoloch,\n  initMetamask,\n  initGnosisSafe,\n  getToken,\n  getEthSigner,\n  getMolochPool,\n} from \"../web3\";\nimport { utils } from \"ethers\";\nimport { monitorTx } from \"../helpers/transaction\";\nimport { formatEther } from \"ethers/utils\";\nimport gql from \"graphql-tag\";\n\nconst MainMenu = ({\n  _handleOpenDropdown,\n  onLoadApproveWeth,\n  member,\n  _handleCloseDropdown,\n  onLoadChangeDelegateKey,\n  onLoadWithdrawLootToken,\n  onLoadWithdrawPoolToken,\n  client,\n  poolMember,\n}) => (\n  <div className=\"dropdownItems\">\n    <Dropdown.Item\n      icon=\"settings\"\n      className=\"item\"\n      content=\"wETH Center\"\n      onClick={() => {\n        _handleOpenDropdown();\n        onLoadApproveWeth();\n      }}\n    />\n    <Dropdown.Divider />\n    {member && member.isActive ? (\n      <>\n        <Dropdown.Item className=\"item\" onClick={() => _handleCloseDropdown()}>\n          <Link to={`/members/${member.id}`} className=\"link\">\n            <p>\n              <Icon name=\"user\" />\n              View Profile\n            </p>\n          </Link>\n        </Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item\n          icon=\"key\"\n          className=\"item\"\n          content=\"Change Delegate Key\"\n          onClick={() => {\n            _handleOpenDropdown();\n            onLoadChangeDelegateKey();\n          }}\n        />\n        <Dropdown.Divider />\n        <Dropdown.Item\n          icon=\"dollar\"\n          className=\"item\"\n          content=\"Ragequit\"\n          onClick={() => {\n            _handleOpenDropdown();\n            onLoadWithdrawLootToken();\n          }}\n        />\n        <Dropdown.Divider />\n      </>\n    ) : (\n      <></>\n    )}\n    {poolMember && poolMember.shares > 0 ? (\n      <>\n        <Dropdown.Item\n          icon=\"dollar\"\n          className=\"item\"\n          content=\"Withdraw Pool Shares\"\n          onClick={() => {\n            _handleOpenDropdown();\n            onLoadWithdrawPoolToken();\n          }}\n        />\n        <Dropdown.Divider />\n      </>\n    ) : (\n      <></>\n    )}\n    <Dropdown.Item className=\"item\">\n      <Link\n        to=\"/login\"\n        className=\"link\"\n        onClick={async () => {\n          _handleCloseDropdown();\n          window.localStorage.setItem(\"loggedInUser\", \"\");\n          await client.resetStore();\n          window.location.reload();\n        }}\n      >\n        <p>\n          <Icon name=\"power off\" />\n          Sign Out\n        </p>\n      </Link>\n    </Dropdown.Item>\n  </div>\n);\nconst MainMenuWrapped = withApollo(MainMenu);\n\nconst ChangeDelegateKeyMenu = ({ moloch, onLoadMain }) => {\n  const [newDelegateKey, setNewDelegateKey] = useState(\"\");\n  const submitChangeDelegateKey = useCallback(() => {\n    console.log(`Sending moloch.updateDelegateKey(${newDelegateKey})`);\n\n    monitorTx(moloch.updateDelegateKey(newDelegateKey));\n  }, [newDelegateKey, moloch]);\n\n  return (\n    <div>\n      <Dropdown.Item\n        icon=\"arrow left\"\n        className=\"item\"\n        content=\"Back to Menu\"\n        onClick={() => onLoadMain()}\n      />\n      <Dropdown.Divider />\n      <Dropdown.Item className=\"item submenu\">\n        <p>\n          <Icon name=\"key\" />\n          Change Delegate Key\n        </p>\n        <Form.Input\n          placeholder=\"Enter new key address\"\n          onChange={event => setNewDelegateKey(event.target.value)}\n          value={newDelegateKey}\n        />\n        <Button onClick={submitChangeDelegateKey}>Save</Button>\n      </Dropdown.Item>\n    </div>\n  );\n};\n\nconst WithdrawLootTokenMenu = ({ moloch, member, onLoadMain }) => {\n  const [ragequitAmount, setRagequitAmount] = useState(\"\");\n  const submitRagequit = useCallback(() => {\n    console.log(`Sending moloch.ragequit(${ragequitAmount})`);\n\n    monitorTx(moloch.ragequit(ragequitAmount));\n  }, [ragequitAmount, moloch]);\n\n  return (\n    <div>\n      <Dropdown.Item\n        icon=\"arrow left\"\n        className=\"item\"\n        content=\"Back to Menu\"\n        onClick={() => onLoadMain()}\n      />\n      <Dropdown.Divider />\n      <Dropdown.Item className=\"item submenu\">\n        <p>\n          <Icon name=\"dollar\" />\n          Ragequit\n        </p>\n        {`${member.shares} Shares Available`}\n        <Form.Input\n          placeholder={`Number of shares`}\n          onChange={event => setRagequitAmount(event.target.value)}\n          value={ragequitAmount}\n        />\n        <Button onClick={submitRagequit}>Withdraw</Button>\n      </Dropdown.Item>\n    </div>\n  );\n};\n\nconst WithdrawPoolTokenMenu = ({ pool, poolMember, onLoadMain }) => {\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const submitPoolWithdraw = useCallback(() => {\n    console.log(`Sending moloch.ragequit(${withdrawAmount})`);\n\n    monitorTx(pool.withdraw(withdrawAmount));\n  }, [withdrawAmount, pool]);\n\n  return (\n    <div>\n      <Dropdown.Item\n        icon=\"arrow left\"\n        className=\"item\"\n        content=\"Back to Menu\"\n        onClick={() => onLoadMain()}\n      />\n      <Dropdown.Divider />\n      <Dropdown.Item className=\"item submenu\">\n        <p>\n          <Icon name=\"dollar\" />\n          Withdraw\n        </p>\n        {`${poolMember.shares} Shares Available`}\n        <Form.Input\n          placeholder={`Number of shares`}\n          onChange={event => setWithdrawAmount(event.target.value)}\n          value={withdrawAmount}\n        />\n        <Button onClick={submitPoolWithdraw}>Withdraw</Button>\n      </Dropdown.Item>\n    </div>\n  );\n};\n\nfunction ApproveWethMenu({ token, eth, onLoadMain, loggedInUser }) {\n  const [approval, setApproval] = useState(\"\");\n  const [wrap, setWrap] = useState(\"\");\n  const [unwrap, setUnwrap] = useState(\"\");\n  const [myWeth, setMyWeth] = useState(\"...\");\n  const [myEth, setMyEth] = useState(\"...\");\n\n  const approve = useCallback(() => {\n    console.log(\n      \"Approving wETH: \",\n      process.env.REACT_APP_MOLOCH_ADDRESS,\n      utils.parseEther(approval).toString(),\n    );\n    monitorTx(token.approve(process.env.REACT_APP_MOLOCH_ADDRESS, utils.parseEther(approval)));\n  }, [approval, token]);\n\n  const approvePool = useCallback(() => {\n    console.log(\n      \"Approving wETH: \",\n      process.env.REACT_APP_MOLOCH_POOL_ADDRESS,\n      utils.parseEther(approval).toString(),\n    );\n    monitorTx(token.approve(process.env.REACT_APP_MOLOCH_POOL_ADDRESS, utils.parseEther(approval)));\n  }, [approval, token]);\n\n  const wrapEth = useCallback(() => {\n    console.log(\n      \"Wrapping ETH: \",\n      process.env.REACT_APP_TOKEN_ADDRESS,\n      utils.parseEther(wrap).toString(),\n    );\n    monitorTx(token.deposit({ value: utils.parseEther(wrap) }));\n  }, [wrap, token]);\n\n  const unwrapWeth = useCallback(() => {\n    console.log(\n      \"Unwrapping wETH: \",\n      process.env.REACT_APP_TOKEN_ADDRESS,\n      utils.parseEther(unwrap).toString(),\n    );\n    monitorTx(token.withdraw(utils.parseEther(unwrap)));\n  }, [unwrap, token]);\n\n  useEffect(() => {\n    async function fetchMyWeth() {\n      if (loggedInUser) {\n        const weth = await token.balanceOf(loggedInUser);\n        setMyWeth(parseFloat(formatEther(weth)).toFixed(2));\n      }\n    }\n    fetchMyWeth();\n  }, [token, loggedInUser]);\n\n  useEffect(() => {\n    async function fetchMyEth() {\n      if (loggedInUser) {\n        const e = await eth.getBalance(loggedInUser);\n        setMyEth(parseFloat(formatEther(e)).toFixed(2));\n      }\n    }\n    fetchMyEth();\n  }, [eth, loggedInUser]);\n\n  return (\n    <>\n      <Dropdown.Item\n        icon=\"arrow left\"\n        className=\"item\"\n        content=\"Back to Menu\"\n        onClick={() => onLoadMain()}\n      />\n      <Dropdown.Divider />\n      <Dropdown.Item className=\"item submenu\">\n        <p>\n          <Icon name=\"settings\" />\n          wETH Center\n        </p>\n        <Form.Input\n          placeholder={`${myWeth} wETH available`}\n          onChange={event => setApproval(event.target.value)}\n          value={approval}\n        />\n        <Button.Group>\n          <Button onClick={approve}>Approve Moloch</Button>\n          <Button onClick={approvePool}>Approve Pool</Button>\n        </Button.Group>\n        <Form.Input\n          placeholder={`${myEth} ETH available`}\n          onChange={event => setWrap(event.target.value)}\n          value={wrap}\n        />\n        <Button onClick={wrapEth}>Wrap</Button>\n        <Form.Input\n          placeholder={`${myWeth} wETH available`}\n          onChange={event => setUnwrap(event.target.value)}\n          value={unwrap}\n        />\n        <Button.Group>\n          <Button onClick={unwrapWeth}>Unwrap</Button>\n        </Button.Group>\n      </Dropdown.Item>\n    </>\n  );\n}\n\nconst GET_POOL_MEMBER = gql`\n  query PoolMembers($address: String!) {\n    poolMember(id: $address) {\n      id\n      shares\n      keepers\n    }\n  }\n`;\n\nexport default ({ loggedInUser, client }) => {\n  const [visibleRightMenu, setVisibleRightMenu] = useState(false);\n  const [visibleMenu, setVisibleMenu] = useState(\"main\");\n  const [moloch, setMoloch] = useState({});\n  const [token, setToken] = useState({});\n  const [eth, setEth] = useState({});\n  const [pool, setPool] = useState({});\n\n  useEffect(() => {\n    async function init() {\n      setMoloch(await getMoloch(loggedInUser));\n      setToken(await getToken(loggedInUser));\n      setPool(await getMolochPool(loggedInUser));\n      if (loggedInUser) {\n        setEth(await getEthSigner());\n      }\n    }\n    init();\n  }, [loggedInUser]);\n\n  const _handleOpenDropdown = () => setVisibleRightMenu(true);\n\n  const _handleCloseDropdown = () => setVisibleRightMenu(false);\n\n  const logIn = async method => {\n    let eth;\n    if (method === \"metamask\") {\n      eth = await initMetamask(client);\n    } else if (method === \"gnosis\") {\n      eth = await initGnosisSafe(client);\n    } else {\n      throw new Error(\"Unsupported Web3 login method\");\n    }\n    if (!eth) {\n      return;\n    }\n\n    setEth(eth);\n    const molochInstance = await getMoloch(loggedInUser);\n    setMoloch(molochInstance);\n  };\n\n  const getTopRightMenuContent = (member, poolMember) => {\n    let topRightMenuContent;\n    if (loggedInUser) {\n      switch (visibleMenu) {\n        case \"main\":\n          topRightMenuContent = (\n            <MainMenuWrapped\n              member={member}\n              poolMember={poolMember}\n              _handleOpenDropdown={() => _handleOpenDropdown()}\n              _handleCloseDropdown={() => _handleCloseDropdown()}\n              onLoadChangeDelegateKey={() => setVisibleMenu(\"changeDelegateKey\")}\n              onLoadWithdrawLootToken={() => setVisibleMenu(\"withdrawLootToken\")}\n              onLoadWithdrawPoolToken={() => setVisibleMenu(\"withdrawPoolToken\")}\n              onLoadApproveWeth={() => setVisibleMenu(\"approveWeth\")}\n            />\n          );\n          break;\n        case \"changeDelegateKey\":\n          topRightMenuContent = (\n            <ChangeDelegateKeyMenu\n              onLoadMain={() => {\n                _handleOpenDropdown();\n                setVisibleMenu(\"main\");\n              }}\n              moloch={moloch}\n            />\n          );\n          break;\n        case \"withdrawLootToken\":\n          topRightMenuContent = (\n            <WithdrawLootTokenMenu\n              onLoadMain={() => {\n                _handleOpenDropdown();\n                setVisibleMenu(\"main\");\n              }}\n              moloch={moloch}\n              member={member}\n            />\n          );\n          break;\n        case \"withdrawPoolToken\":\n          topRightMenuContent = (\n            <WithdrawPoolTokenMenu\n              onLoadMain={() => {\n                _handleOpenDropdown();\n                setVisibleMenu(\"main\");\n              }}\n              pool={pool}\n              poolMember={poolMember}\n            />\n          );\n          break;\n        case \"approveWeth\":\n          topRightMenuContent = (\n            <ApproveWethMenu\n              onLoadMain={() => {\n                _handleOpenDropdown();\n                setVisibleMenu(\"main\");\n              }}\n              token={token}\n              eth={eth}\n              loggedInUser={loggedInUser}\n            />\n          );\n          break;\n        default:\n          break;\n      }\n    } else {\n      topRightMenuContent = (\n        <>\n          <Dropdown.Item\n            icon=\"user\"\n            className=\"item\"\n            content=\"Log In With Metamask\"\n            onClick={() => logIn(\"metamask\")}\n          />\n          <Dropdown.Divider />\n          <Dropdown.Item\n            icon=\"user\"\n            className=\"item\"\n            content=\"Log In With Gnosis Safe\"\n            onClick={() => logIn(\"gnosis\")}\n          />\n        </>\n      );\n    }\n    return topRightMenuContent;\n  };\n\n  const { loading: memberLoading, error: memberError, data: memberData } = useQuery(\n    GET_MEMBER_DETAIL,\n    {\n      variables: { address: loggedInUser },\n    },\n  );\n\n  const { loading: poolLoading, error: poolError, data: poolMemberData } = useQuery(\n    GET_POOL_MEMBER,\n    {\n      variables: { address: loggedInUser },\n    },\n  );\n\n  if (memberLoading || poolLoading) return <Loader active />;\n  if (memberError || poolError) throw new Error(`Error!: ${memberError} ${poolError}`);\n  return (\n    <div id=\"header\">\n      <Grid columns={3} stackable verticalAlign=\"middle\">\n        <Grid.Column textAlign=\"center\">\n          <a href=\"https://twitter.com/dao_meme\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <Icon name=\"twitter\" size=\"big\" />\n          </a>\n          <a href=\"https://weibo.com/memedao\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <Icon name=\"weibo\" size=\"big\" />\n          </a>\n          <a href=\"https://github.com/memedao\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <Icon name=\"github\" size=\"big\" />\n          </a>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\" className=\"logo\">\n          <Link to=\"/\">一本DAO</Link>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\" className=\"dropdown\">\n          <Dropdown\n            className=\"right_dropdown\"\n            open={visibleRightMenu}\n            onBlur={() => _handleCloseDropdown()}\n            onFocus={() => _handleOpenDropdown()}\n            text={loggedInUser ? `${loggedInUser.substring(0, 6)}...` : \"Web3 Login\"}\n          >\n            <Dropdown.Menu className=\"menu blurred\" direction=\"left\">\n              {getTopRightMenuContent(memberData.member, poolMemberData.poolMember)}\n            </Dropdown.Menu>\n          </Dropdown>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n","import { utils } from \"ethers\";\nimport { bigNumberify } from \"ethers/utils\";\n\nexport const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n});\n\n/**\n * Converts Wei amount to Dollars\n * @param {*} weiAmount\n * @param {*} exchangeRate in Wei units\n */\nexport function convertWeiToDollars(weiAmount, exchangeRate) {\n  const weitoEth = utils.formatEther(weiAmount);\n  const exchWeiToEth = utils.formatEther(exchangeRate);\n\n  return currencyFormatter.format(parseFloat(weitoEth * exchWeiToEth));\n}\n\nexport function getShareValue(totalShares, totalValue) {\n  const ethPerShare = bigNumberify(totalShares).gt(0)\n    ? bigNumberify(totalValue).div(bigNumberify(totalShares))\n    : 0; // in eth\n  return ethPerShare;\n}\n","import React from \"react\";\nimport { Grid, Image, Statistic, Loader } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"react-apollo\";\nimport { utils } from \"ethers\";\nimport { convertWeiToDollars, getShareValue } from \"../helpers/currency\";\nimport gql from \"graphql-tag\";\n\nimport logo from \"../assets/1pondo.png\";\n\nconst GET_METADATA = gql`\n  {\n    poolValue @client\n    exchangeRate @client\n    totalShares @client\n    guildBankValue @client\n  }\n`;\n\nconst Home = () => {\n  const { loading, error, data } = useQuery(GET_METADATA);\n  if (loading) return <Loader size=\"massive\" active />;\n  if (error) throw new Error(error);\n  const { guildBankValue, exchangeRate, totalShares, poolValue } = data;\n\n  const shareValue = getShareValue(totalShares, guildBankValue);\n  console.log(\"metadata: \", data);\n\n  return (\n    <div id=\"homepage\">\n      <Grid container verticalAlign=\"middle\" textAlign=\"center\">\n        <Grid.Row>\n          <Image src={logo} id='main-logo'></Image>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid doubling stackable columns=\"equal\" verticalAlign=\"bottom\">\n            <Grid.Column>\n              <Grid.Row className=\"guild_value\" textAlign=\"center\">\n                <Statistic inverted>\n                  <Statistic.Label>Guild Bank Value</Statistic.Label>\n                  <Statistic.Value>\n                    {convertWeiToDollars(guildBankValue, exchangeRate)}\n                  </Statistic.Value>\n                </Statistic>\n              </Grid.Row>\n              {/* <Grid.Row className=\"pool_value\" textAlign=\"center\">\n                <Statistic size=\"tiny\" inverted>\n                  <Statistic.Label>Pool Value</Statistic.Label>\n                  <Statistic.Value>{convertWeiToDollars(poolValue, exchangeRate)}</Statistic.Value>\n                </Statistic>\n              </Grid.Row> */}\n            </Grid.Column>\n          </Grid>\n        </Grid.Row>\n        <Grid.Row className=\"mt-5\">\n          <Grid stackable columns={3}>\n            <Grid.Column textAlign=\"center\">\n              <Statistic inverted label=\"Total Shares\" size=\"tiny\"\n                value={totalShares}\n              />\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\">\n              <Statistic inverted label=\"Total ETH\" size=\"tiny\"\n                value={parseFloat(utils.formatEther(guildBankValue)).toFixed(0)}\n              />\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\">\n              <Statistic inverted label=\"Share Value\" size=\"tiny\"\n                value={convertWeiToDollars(shareValue, exchangeRate)}\n              />\n            </Grid.Column>\n          </Grid>\n        </Grid.Row>\n        <Grid.Row textAlign=\"center mt-3\">\n          <a class=\"text_link\" href=\"https://github.com/memedao/whitepaper/blob/master/%E4%B8%80%E6%9C%ACDAO%EF%BC%8C%E4%B8%80%E7%A7%8D%E7%82%B9%E5%AF%B9%E7%82%B9%E7%9A%84%E5%90%90%E6%A7%BD%E7%B3%BB%E7%BB%9F.pdf\">\n            Whitepaper / 白皮书\n          </a>\n        </Grid.Row>\n\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Progress, Grid } from \"semantic-ui-react\";\n\nconst ProgressBar = ({ yes, no }) => {\n  yes = parseInt(yes)\n  no = parseInt(no)\n  const total = yes + no;\n  const percentYes = yes === 0 ? 0 : Math.round((yes / total) * 100);\n  const percentNo = no === 0 ? 0 : Math.round((no / total) * 100);\n  return (\n    <>\n      <div style={{ position: \"relative\" }}>\n        <Progress\n          percent={percentYes + percentNo}\n          color=\"red\"\n          size=\"small\"\n          style={{\n            position: \"absolute\",\n            top: \"0\",\n            width: \"100%\",\n          }}\n          className={no === 0 ? \"hide-bar\" : \"\"}\n        />\n        <Progress\n          percent={percentYes}\n          color=\"green\"\n          size=\"small\"\n          className={yes === 0 ? \"hide-bar\" : \"\"}\n        />\n      </div>\n      <Grid columns=\"equal\">\n        <Grid.Column floated=\"left\">{yes} Yes Votes</Grid.Column>\n        <Grid.Column floated=\"right\" textAlign=\"right\">\n          {no} No Votes\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\n\nexport const VOTING_PERIOD_LENGTH = 15;\nexport const GRACE_PERIOD_LENGTH = 15;\nexport const PERIOD_DURATION = 17280;\n\nexport const ProposalStatus = {\n  Unknown: \"Unknown\",\n  InQueue: \"InQueue\",\n  VotingPeriod: \"VotingPeriod\",\n  GracePeriod: \"GracePeriod\",\n  Aborted: \"Aborted\",\n  Passed: \"Passed\",\n  Failed: \"Failed\",\n  ReadyForProcessing: \"ReadyForProcessing\"\n};\n\nexport function periodsToTime(periods) {\n  const seconds = PERIOD_DURATION * periods;\n\n  const days = Math.floor((seconds % 31536000) / 86400);\n  const hours = Math.floor(((seconds % 31536000) % 86400) / 3600);\n  const minutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);\n\n  let string = \"\";\n  string = days ? `${days} days` : string;\n  string = hours ? `${string} ${hours} hours` : string;\n  string = minutes ? `${string} ${minutes} minutes` : string;\n\n  return string;\n}\n\nexport function getProposalCountdownText(proposal) {\n  switch (proposal.status) {\n    case ProposalStatus.InQueue:\n      return (\n        <>\n          <span className=\"subtext\">Voting Begins: </span>\n          <span>{proposal.votingStarts ? periodsToTime(proposal.votingStarts) : \"-\"}</span>\n        </>\n      );\n    case ProposalStatus.VotingPeriod:\n      return (\n        <>\n          <span className=\"subtext\">Voting Ends: </span>\n          <span>{proposal.votingEnds ? periodsToTime(proposal.votingEnds) : \"-\"}</span>\n        </>\n      );\n    case ProposalStatus.GracePeriod:\n      return (\n        <>\n          <span className=\"subtext\">Grace Period Ends: </span>\n          <span>{proposal.gracePeriod ? periodsToTime(proposal.gracePeriod) : \"-\"}</span>\n        </>\n      );\n    case ProposalStatus.Passed:\n      return <span className=\"subtext\">Passed</span>;\n    case ProposalStatus.Failed:\n      return <span className=\"subtext\">Failed</span>;\n    case ProposalStatus.Aborted:\n      return <span className=\"subtext\">Aborted</span>;\n    case ProposalStatus.ReadyForProcessing:\n      return <span className=\"subtext\">Ready For Processing</span>;\n    default:\n      return <></>;\n  }\n}\n\nexport const inQueue = (proposal, currentPeriod) => currentPeriod < proposal.startingPeriod;\n\nexport const inGracePeriod = (proposal, currentPeriod) =>\n    currentPeriod >= proposal.startingPeriod + VOTING_PERIOD_LENGTH &&\n    currentPeriod < proposal.startingPeriod + VOTING_PERIOD_LENGTH + GRACE_PERIOD_LENGTH;\n\nexport const inVotingPeriod = (proposal, currentPeriod) =>\n    currentPeriod >= proposal.startingPeriod &&\n    currentPeriod < proposal.startingPeriod + VOTING_PERIOD_LENGTH;\n\nexport const passedVotingAndGrace = (proposal, currentPeriod) =>\n    currentPeriod >= proposal.startingPeriod + VOTING_PERIOD_LENGTH + GRACE_PERIOD_LENGTH;\n\nexport function determineProposalStatus(proposal, currentPeriod) {\n  proposal.startingPeriod = +proposal.startingPeriod\n\n  let status;\n  if (proposal.processed && proposal.aborted) {\n    status = ProposalStatus.Aborted;\n  } else if (proposal.processed && proposal.didPass) {\n    status = ProposalStatus.Passed;\n  } else if (proposal.processed && !proposal.didPass) {\n    status = ProposalStatus.Failed;\n  } else if (inGracePeriod(proposal, currentPeriod)) {\n    status = ProposalStatus.GracePeriod;\n  } else if (inVotingPeriod(proposal, currentPeriod)) {\n    status = ProposalStatus.VotingPeriod;\n  } else if (inQueue(proposal, currentPeriod)) {\n    status = ProposalStatus.InQueue;\n  } else if (passedVotingAndGrace(proposal, currentPeriod)) {\n    status = ProposalStatus.ReadyForProcessing;\n  } else {\n    status = ProposalStatus.Unknown;\n  }\n\n  return status;\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Grid, Icon, Segment, Button, Image, Loader } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport hood from \"assets/hood.png\";\nimport ProgressBar from \"./ProgressBar\";\nimport { useQuery } from \"react-apollo\";\nimport { ProposalStatus, getProposalCountdownText } from \"../helpers/proposals\";\nimport { getMoloch } from \"../web3\";\nimport { convertWeiToDollars, getShareValue } from \"../helpers/currency\";\nimport { utils } from \"ethers\";\nimport Linkify from \"react-linkify\";\nimport ProfileHover from \"profile-hover\";\nimport { monitorTx } from \"../helpers/transaction\";\nimport gql from \"graphql-tag\";\n\nexport const Vote = {\n  Null: 0, // default value, counted as abstention\n  Yes: 1,\n  No: 2,\n};\n\nconst MemberAvatar = ({ member }) => {\n  return (\n    <Grid.Column\n      mobile={4}\n      tablet={3}\n      computer={3}\n      textAlign=\"center\"\n      className=\"member_avatar\"\n      title={member}\n    >\n      <Link to={`/members/${member}`} className=\"uncolored\">\n        <Image src={hood} centered />\n        <p className=\"name\">\n          {!member ? \"\" : member.length > 10 ? member.substring(0, 10) + \"...\" : member}\n        </p>\n      </Link>\n    </Grid.Column>\n  );\n};\n\nconst GET_PROPOSAL_DETAIL = gql`\n  query Proposal($id: String!, $delegateKey: String!) {\n    proposal(id: $id) {\n      id\n      applicantAddress\n      memberAddress\n      timestamp\n      tokenTribute\n      sharesRequested\n      processed\n      didPass\n      aborted\n      yesVotes\n      noVotes\n      yesShares\n      noShares\n      proposalIndex\n      votes(first: 100) {\n        member {\n          id\n          shares\n        }\n        uintVote\n      }\n      details\n      startingPeriod\n      processed\n      status @client\n      title @client\n      description @client\n      gracePeriod @client\n      votingEnds @client\n      votingStarts @client\n      readyForProcessing @client\n    }\n    members(where: { delegateKey: $delegateKey }) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n    }\n    exchangeRate @client\n    totalShares @client\n    guildBankValue @client\n    currentPeriod @client\n    proposalQueueLength @client\n  }\n`;\n\nconst ProposalDetail = ({ loggedInUser, match }) => {\n  const [moloch, setMoloch] = useState();\n\n  useEffect(() => {\n    async function init() {\n      const m = await getMoloch(loggedInUser);\n      setMoloch(m);\n    }\n    init();\n  });\n  const handleNo = useCallback(\n    async proposal => {\n      monitorTx(moloch.submitVote(proposal.proposalIndex, Vote.No));\n    },\n    [moloch],\n  );\n\n  const handleYes = useCallback(\n    async proposal => {\n      monitorTx(moloch.submitVote(proposal.proposalIndex, Vote.Yes));\n    },\n    [moloch],\n  );\n\n  const handleProcess = useCallback(\n    async proposal => {\n      monitorTx(moloch.processProposal(proposal.proposalIndex));\n    },\n    [moloch],\n  );\n\n  const { loading, error, data } = useQuery(GET_PROPOSAL_DETAIL, {\n    variables: { id: match.params.id, delegateKey: loggedInUser },\n  });\n\n  if (loading) return <Loader size=\"massive\" active />;\n  if (error) throw new Error(`Error!: ${error}`);\n\n  const {\n    proposal,\n    exchangeRate,\n    totalShares,\n    guildBankValue,\n    members,\n  } = data;\n\n  const shareValue = getShareValue(totalShares, guildBankValue);\n\n  const user = members.length > 0 ? members[0] : null;\n  const userHasVoted = proposal.votes.find(vote => vote.member.id === loggedInUser) ? true : false;\n  const cannotVote =\n    proposal.aborted ||\n    userHasVoted ||\n    proposal.status !== ProposalStatus.VotingPeriod ||\n    (!(user && user.shares) || !(user && user.isActive));\n\n  return (\n    <div id=\"proposal_detail\">\n      <Grid container>\n        <Grid.Column>\n          <Grid.Row>\n            <span className=\"title\">{proposal.title ? proposal.title : \"N/A\"}</span>\n          </Grid.Row>\n          <Grid.Row>\n            <Linkify properties={{ target: \"_blank\" }}>\n              <div className=\"subtext description wordwrap\">\n                {proposal.description ? proposal.description : \"N/A\"}\n              </div>\n            </Linkify>\n          </Grid.Row>\n        </Grid.Column>\n      </Grid>\n      <Grid container stackable columns={2} divided>\n        <Grid.Column>\n          <Grid container>\n            <Grid container stackable columns={2} doubling>\n              <Grid.Column>\n                <p className=\"subtext\">Applicant/Beneficiary</p>\n                <ProfileHover address={proposal.applicantAddress} displayFull=\"true\" />\n              </Grid.Column>\n              <Grid.Column>\n                <p className=\"subtext\">Proposer</p>\n                <ProfileHover\n                  address={proposal.memberAddress}\n                  displayFull=\"true\"\n                  url={`${window.location.host}/members/${proposal.memberAddress}`}\n                />\n              </Grid.Column>\n            </Grid>\n            <Grid.Row className=\"tributes\">\n              <Segment className=\"pill\" textAlign=\"center\">\n                <Icon name=\"ethereum\" />\n                {utils.formatEther(proposal.tokenTribute)} ETH\n              </Segment>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid container columns={2}>\n                <Grid.Column>\n                  <p className=\"subtext voting\">Shares</p>\n                  <p className=\"amount\">{proposal.sharesRequested}</p>\n                </Grid.Column>\n                <Grid.Column textAlign=\"right\">\n                  <p className=\"subtext\">Total USD Value</p>\n                  <p className=\"amount\">\n                    {convertWeiToDollars(\n                      utils\n                        .bigNumberify(proposal.sharesRequested)\n                        .mul(shareValue)\n                        .toString(),\n                      exchangeRate,\n                    )}\n                  </p>\n                </Grid.Column>\n              </Grid>\n            </Grid.Row>\n          </Grid>\n        </Grid.Column>\n        <Grid.Column>\n          <Grid container>\n            <Grid.Row textAlign=\"center\" className=\"pill_column\">\n              <Grid.Column textAlign=\"center\" className=\"pill_column\">\n                <span className=\"pill\">{getProposalCountdownText(proposal)}</span>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column className=\"member_list\">\n                {proposal.votes.length > 0 ? (\n                  <Grid>\n                    <Grid.Row className=\"members_row\">\n                      {/* centered */}\n                      {proposal.votes.map((vote, idx) => (\n                        <MemberAvatar\n                          member={vote.member.id}\n                          shares={vote.member.shares}\n                          key={idx}\n                        />\n                      ))}\n                    </Grid.Row>\n                  </Grid>\n                ) : null}\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column textAlign=\"center\">\n                {proposal.aborted ? (\n                  <p className=\"amount\">Aborted</p>\n                ) : (\n                  <ProgressBar yes={proposal.yesShares} no={proposal.noShares} />\n                )}\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid container stackable columns={3}>\n                <Grid.Column textAlign=\"center\">\n                  <Button\n                    className=\"btn\"\n                    color=\"green\"\n                    disabled={cannotVote}\n                    onClick={() => handleYes(proposal)}\n                  >\n                    Vote Yes\n                  </Button>\n                </Grid.Column>\n                <Grid.Column textAlign=\"center\">\n                  <Button\n                    className=\"btn\"\n                    color=\"red\"\n                    disabled={cannotVote}\n                    onClick={() => handleNo(proposal)}\n                  >\n                    Vote No\n                  </Button>\n                </Grid.Column>\n                <Grid.Column textAlign=\"center\">\n                  <Button\n                    className=\"btn\"\n                    color=\"grey\"\n                    onClick={() => handleProcess(proposal)}\n                    disabled={proposal.status !== ProposalStatus.ReadyForProcessing}\n                  >\n                    Process Proposal\n                  </Button>\n                </Grid.Column>\n              </Grid>\n            </Grid.Row>\n          </Grid>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ProposalDetail;\n","import React from \"react\";\nimport { Divider, Grid, Segment, Image, Icon, Label, Header, Loader } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport ProfileHover from \"profile-hover\";\n\nimport bull from \"assets/bull.png\";\nimport hood from \"assets/hood.png\";\n\nimport { useQuery } from \"react-apollo\";\nimport { Vote } from \"./ProposalDetail\";\nimport { utils } from \"ethers\";\nimport { convertWeiToDollars, getShareValue } from \"../helpers/currency\";\nimport { getProposalCountdownText } from \"../helpers/proposals\";\nimport { formatEthAddress } from \"../helpers/address\";\nimport gql from \"graphql-tag\";\n\nconst GET_MEMBER_DETAIL = gql`\n  query Member($address: String!) {\n    member(id: $address) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n    }\n  }\n`;\n\nconst GET_MEMBER_VOTES = gql`\n  query Member($address: String!) {\n    member(id: $address) {\n      id\n      votes {\n        uintVote\n        proposal {\n          id\n          timestamp\n          tokenTribute\n          sharesRequested\n          processed\n          didPass\n          aborted\n          yesVotes\n          noVotes\n          proposalIndex\n          details\n          status @client\n          title @client\n          description @client\n          gracePeriod @client\n          votingEnds @client\n          votingStarts @client\n          readyForProcessing @client\n        }\n      }\n    }\n  }\n`;\n\nconst GET_METADATA = gql`\n  {\n    exchangeRate @client\n    totalShares @client\n    guildBankValue @client\n    currentPeriod @client\n    proposalQueueLength @client\n  }\n`;\n\nconst MemberDetail = ({ loggedInUser, memberAddress, shareValue, exchangeRate }) => {\n  const { loading, error, data } = useQuery(GET_MEMBER_DETAIL, {\n    variables: { address: memberAddress },\n  });\n  if (loading) {\n    return <Loader size=\"massive\" active />;\n  }\n  if (error) throw new Error(error);\n  const { member } = data;\n  return (\n    <Segment className=\"blurred box\">\n      <Grid container columns={1}>\n        <Grid.Row>\n          <Grid container columns={2}>\n            <Grid.Column>\n              <p className=\"subtitle\">Shares</p>\n              <p className=\"amount\">{member.shares}</p>\n            </Grid.Column>\n            <Grid.Column textAlign=\"right\">\n              <p className=\"subtitle\">Total Value</p>\n              <p className=\"amount\">\n                {convertWeiToDollars(\n                  utils\n                    .bigNumberify(member.shares)\n                    .mul(shareValue)\n                    .toString(),\n                  exchangeRate,\n                )}\n              </p>\n            </Grid.Column>\n          </Grid>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column textAlign=\"center\" className=\"avatar\">\n            <Image\n              centered\n              src={loggedInUser === member.id || loggedInUser === member.delegateKey ? bull : hood}\n              size=\"tiny\"\n            />\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <p className=\"subtitle\">Tribute</p>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Segment className=\"pill\" textAlign=\"center\">\n              <Icon name=\"ethereum\" />\n              {utils.formatEther(member.tokenTribute)} ETH\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <p className=\"subtitle\">Delegate Key</p>\n          </Grid.Column>\n          <Grid.Column>\n            <ProfileHover address={member.delegateKey} displayFull=\"true\">\n              <p className=\"title\">{member.delegateKey}</p>\n            </ProfileHover>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  );\n};\n\nconst ProposalDetail = ({ memberAddress }) => {\n  const { loading, error, data } = useQuery(GET_MEMBER_VOTES, {\n    variables: { address: memberAddress },\n  });\n  if (loading) {\n    return <Loader size=\"massive\" active />;\n  }\n  if (error) throw new Error(error);\n  const { member } = data;\n  const proposals = member.votes;\n  return (\n    <Segment className=\"blurred box\">\n      <Grid columns=\"equal\" textAlign=\"center\">\n        <Grid.Row className=\"subtext\" style={{ fontSize: 20 }}>\n          History\n        </Grid.Row>\n      </Grid>\n      <Grid columns=\"equal\">\n        <Grid.Row className=\"header\">\n          <Grid.Column textAlign=\"center\">\n            <p className=\"subtext\">Proposal Title</p>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <p className=\"subtext\">Date</p>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <p className=\"subtext\">Shares Requested</p>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <p className=\"subtext\">Tribute Offered</p>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <p className=\"subtext\">Vote</p>\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <p className=\"subtext\">Status</p>\n          </Grid.Column>\n        </Grid.Row>\n        {proposals && proposals.length > 0 ? (\n          proposals.map((p, idx) => {\n            return (\n              <React.Fragment key={idx}>\n                <Grid.Row verticalAlign=\"middle\">\n                  <Grid.Column textAlign=\"center\">\n                    <Link to={{ pathname: `/proposals/${p.proposal.id}` }} className=\"uncolored\">\n                      {p.uintVote === Vote.Yes && (\n                        <Label className=\"dot\" circular color=\"green\" empty />\n                      )}\n                      {/* TODO: is this right? */}\n                      {(p.uintVote === Vote.No || p.uintVote === Vote.Null) && (\n                        <Label className=\"dot\" circular color=\"red\" empty />\n                      )}\n                      {p.proposal.title}\n                    </Link>\n                  </Grid.Column>\n                  <Grid.Column textAlign=\"center\">\n                    <p className=\"subtext date\">\n                      {new Date(p.proposal.timestamp * 1000).toISOString().slice(0, 10)}\n                    </p>\n                  </Grid.Column>\n                  <Grid.Column textAlign=\"center\">\n                    <p className=\"subtext date\">{p.proposal.sharesRequested}</p>\n                  </Grid.Column>\n                  <Grid.Column textAlign=\"center\">\n                    <p className=\"subtext date\">{utils.formatEther(p.proposal.tokenTribute)}</p>\n                  </Grid.Column>\n                  <Grid.Column textAlign=\"center\">\n                    <Header\n                      as=\"p\"\n                      color={\n                        p.uintVote === Vote.Yes ? \"green\" : p.uintVote === Vote.No ? \"red\" : null\n                      }\n                    >\n                      {p.uintVote === Vote.Yes ? \"Y\" : p.uintVote === Vote.No ? \"N\" : \"\"}\n                    </Header>\n                  </Grid.Column>\n                  <Grid.Column textAlign=\"center\">\n                    <p className=\"subtext date\">{getProposalCountdownText(p.proposal)}</p>\n                  </Grid.Column>\n                </Grid.Row>\n                <Divider />\n              </React.Fragment>\n            );\n          })\n        ) : (\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column textAlign=\"center\">\n              {`This member hasn't voted on any proposals yet.`}\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Segment>\n  );\n};\n\nconst MemberDetailView = ({ loggedInUser, match }) => {\n  const { loading, error, data } = useQuery(GET_METADATA);\n  if (loading) return <Loader size=\"massive\" active />;\n  if (error) throw new Error(error);\n  const { totalShares, guildBankValue, exchangeRate } = data;\n\n  const shareValue = getShareValue(totalShares, guildBankValue);\n  return (\n    <div id=\"member_detail\">\n      <Divider />\n      <Grid container>\n        <Grid.Row>\n          <Grid.Column mobile={16} tablet={16} computer={6}>\n            <p className=\"title\">\n              <a\n                href={`https://etherscan.io/address/${match.params.name}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {formatEthAddress(match.params.name)}\n              </a>\n            </p>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row className=\"details\">\n          <Grid.Column mobile={16} tablet={16} computer={6} className=\"user\">\n            <MemberDetail\n              loggedInUser={loggedInUser}\n              memberAddress={match.params.name}\n              shareValue={shareValue}\n              exchangeRate={exchangeRate}\n            />\n          </Grid.Column>\n          <Grid.Column mobile={16} tablet={16} computer={10} className=\"proposals\">\n            <ProposalDetail memberAddress={match.params.name} />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nexport default MemberDetailView;\n","export function formatEthAddress(address) {\n  return `${address.substring(0, 6)}...${address.slice(-4)}`\n}","import React from \"react\";\nimport { Grid, Image, Divider } from \"semantic-ui-react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport MemberDetail from \"./MemberDetail\";\nimport bull from \"assets/bull.png\";\nimport hood from \"assets/hood.png\";\n\nimport { useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { GET_MEMBERS, GET_MEMBER_DETAIL } from \"../helpers/graphQlQueries\";\n\nimport ProfileHover from \"profile-hover\";\n\nconst MemberAvatar = ({ address, shares }) => (\n  <Grid.Column\n    mobile={5}\n    tablet={3}\n    computer={3}\n    textAlign=\"center\"\n    className=\"member_avatar\"\n    title={address}\n  >\n    <ProfileHover address={address} noTheme>\n      <Link to={`/members/${address}`} className=\"uncolored\">\n        <Image src={hood} centered size=\"tiny\" />\n        <p className=\"name\">\n          {!address ? \"\" : address.length > 10 ? address.substring(0, 10) + \"...\" : address}\n        </p>\n        <p className=\"subtext\">{shares} shares</p>\n      </Link>\n    </ProfileHover>\n  </Grid.Column>\n);\n\nconst LoggedInUser = ({ loggedInUser }) => {\n  const { loading, error, data } = useQuery(GET_MEMBER_DETAIL, {\n    variables: { address: loggedInUser },\n  });\n  if (loading) return \"...\";\n  if (error) throw new Error(error);\n\n  const { member } = data;\n  return member && member.isActive ? (\n    <ProfileHover address={loggedInUser} noTheme>\n      <Link to={`/members/${member.id}`} className=\"uncolored\">\n        <Image centered src={bull} size=\"tiny\" />\n        <p className=\"name\">\n          {!member.id ? \"\" : member.id.length > 10 ? member.id.substring(0, 10) + \"...\" : member.id}\n        </p>\n        <p className=\"subtext\">{member.shares ? member.shares : 0} shares</p>\n      </Link>\n    </ProfileHover>\n  ) : (\n    <div />\n  );\n};\n\nconst GET_ELDERS = gql`\n  {\n    members(\n      first: 100\n      where: { shares_gte: 100, isActive: true }\n      orderBy: shares\n      orderDirection: desc\n    ) {\n      id\n      shares\n    }\n  }\n`;\nconst Elders = () => {\n  const { loading, error, data } = useQuery(GET_ELDERS);\n  if (loading) return \"...\";\n  if (error) throw new Error(error);\n  return data.members.length > 0 ? (\n    data.members.map((elder, idx) => (\n      <MemberAvatar address={elder.id} shares={elder.shares} key={idx} />\n    ))\n  ) : (\n    <>No elders to show.</>\n  );\n};\n\nconst GET_NON_ELDERS = gql`\n  {\n    members(\n      first: 100\n      where: { shares_gt: 0, shares_lt: 100, isActive: true }\n      orderBy: shares\n      orderDirection: desc\n    ) {\n      id\n      shares\n    }\n  }\n`;\nconst Contributors = () => {\n  const { loading, error, data } = useQuery(GET_NON_ELDERS);\n  if (loading) return \"...\";\n  if (error) throw new Error(error);\n  return data.members.length > 0 ? (\n    data.members.map((contributor, idx) => (\n      <MemberAvatar address={contributor.id} shares={contributor.shares} key={idx} />\n    ))\n  ) : (\n    <>No contributors to show.</>\n  );\n};\n\nconst MemberList = props => {\n  const { loading, error, data } = useQuery(GET_MEMBERS);\n  let members;\n  if (error) {\n    members = \"NA\";\n    console.error(`Could not load members: ${error}`);\n  } else if (loading) {\n    members = \"-\";\n  } else {\n    members = data.members.length;\n  }\n  return (\n    <div id=\"member_list\">\n      <Grid columns={16} verticalAlign=\"middle\">\n        <Grid.Column\n          mobile={16}\n          tablet={6}\n          computer={6}\n          textAlign=\"left\"\n          className=\"member_list_header\"\n        >\n          <p className=\"subtext\">{members} Members</p>\n        </Grid.Column>\n      </Grid>\n\n      <Grid>\n        <Grid.Column textAlign=\"center\">\n          <LoggedInUser {...props} />\n        </Grid.Column>\n      </Grid>\n      <Grid className=\"member_item\">\n        <Grid.Row>\n          <p style={{ paddingLeft: \"1rem\" }}>Elders (100+ shares)</p>\n        </Grid.Row>\n        <Divider />\n        <Grid.Row className=\"members_row\" centered>\n          <Elders />\n        </Grid.Row>\n      </Grid>\n      <Grid className=\"member_item\">\n        <Grid.Row>\n          <p style={{ paddingLeft: \"1rem\" }}>Contributors</p>\n        </Grid.Row>\n        <Divider />\n        <Grid.Row className=\"members_row\" centered>\n          <Contributors />\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nconst MemberListView = higherProps => (\n  <Switch>\n    <Route\n      exact\n      path=\"/members\"\n      render={props => <MemberList {...props} loggedInUser={higherProps.loggedInUser} />}\n    />\n    <Route\n      path=\"/members/:name\"\n      render={props => <MemberDetail {...props} loggedInUser={higherProps.loggedInUser} />}\n    />\n  </Switch>\n);\n\nexport default MemberListView;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Grid,\n  Button,\n  Statistic,\n  Loader,\n  Popup,\n  Modal,\n  Header,\n  Icon,\n  Input,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"react-apollo\";\nimport { utils } from \"ethers\";\nimport { convertWeiToDollars, getShareValue } from \"../helpers/currency\";\nimport gql from \"graphql-tag\";\nimport { getMolochPool } from \"web3\";\nimport { monitorTx } from \"helpers/transaction\";\nimport { getToken } from \"web3\";\nimport { formatEther, parseEther } from \"ethers/utils\";\nimport { EtherSymbol } from \"ethers/constants\";\n\nconst NumMembers = ({ disabled }) => (\n  <Link to=\"/pool-members\" className=\"link\">\n    <Button color=\"grey\" size=\"medium\" fluid disabled={disabled}>\n      Members\n    </Button>\n  </Link>\n);\n\nconst Donate = ({ token, molochPool, loggedInUser, disabled }) => {\n  const [donation, setDonation] = useState(\"\");\n  const [myWeth, setMyWeth] = useState();\n\n  useEffect(() => {\n    async function fetchMyWeth() {\n      if (token && typeof token.balanceOf === \"function\" && loggedInUser) {\n        const weth = await token.balanceOf(loggedInUser);\n        setMyWeth(parseFloat(formatEther(weth)).toFixed(2));\n      }\n    }\n    fetchMyWeth();\n  }, [token, loggedInUser]);\n\n  const donate = useCallback(() => {\n    console.log(\"Calling molochPool.deposit with \", parseEther(donation));\n    monitorTx(molochPool.deposit(parseEther(donation)));\n  }, [donation, molochPool]);\n\n  return (\n    <Modal\n      trigger={\n        <Button color=\"grey\" size=\"medium\" fluid disabled={disabled}>\n          Donate\n        </Button>\n      }\n      basic\n      size=\"small\"\n      closeIcon\n    >\n      <Header content=\"Donate to the Moloch Pool\" />\n      <Modal.Content>\n        <p>Thank you for your donation! Use the wETH Center to wrap and approve.</p>\n        <Input\n          inverted\n          labelPosition=\"right\"\n          label={`${myWeth}w${EtherSymbol}`}\n          placeholder=\"wETH to Donate\"\n          onChange={event => setDonation(event.target.value)}\n          value={donation}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color=\"green\" inverted onClick={donate}>\n          <Icon name=\"checkmark\" /> Donate\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nconst Sync = ({ molochPool, lastProcessedProposalIndex, currentPoolIndex, loggedInUser, disabled }) => {\n  const synced = currentPoolIndex >= lastProcessedProposalIndex;\n  return (\n    <Popup\n      inverted\n      content={\n        synced\n          ? `Fully synced to current proposal ${lastProcessedProposalIndex}`\n          : `Currently synced to ${currentPoolIndex}`\n      }\n      trigger={\n        <Button\n          compact\n          color=\"grey\"\n          size=\"medium\"\n          fluid\n          onClick={() => {\n            monitorTx(molochPool.sync(lastProcessedProposalIndex));\n          }}\n          disabled={synced || !loggedInUser || disabled}\n        >\n          Sync\n        </Button>\n      }\n    />\n  );\n};\n\nconst GET_POOL_METADATA = gql`\n  {\n    totalPoolShares @client\n    poolValue @client\n    exchangeRate @client\n    proposals(first: 1, where: { processed: true }, orderBy: proposalIndex, orderDirection: desc) {\n      proposalIndex\n    }\n    poolMetas {\n      currentPoolIndex\n      totalPoolShares\n    }\n  }\n`;\n\nexport default function Pool({ loggedInUser }) {\n  const [molochPool, setMolochPool] = useState({});\n  const [token, setToken] = useState({});\n\n  useEffect(() => {\n    async function fetchData() {\n      const pool = await getMolochPool(loggedInUser);\n      const t = await getToken(loggedInUser);\n      setMolochPool(pool);\n      setToken(t);\n    }\n    fetchData();\n  }, [loggedInUser, token]);\n\n  const { loading, error, data } = useQuery(GET_POOL_METADATA);\n\n  if (loading) return <Loader size=\"massive\" active />;\n  if (error) throw new Error(error);\n\n  const {\n    poolValue,\n    exchangeRate,\n    proposals: [lastProcessedProposal],\n    poolMetas,\n  } = data;\n\n  let poolMeta = {\n    currentPoolIndex: 0,\n    totalPoolShares: 0\n  }\n\n  let disablePool = true;\n  if (poolMetas.length > 0) {\n    poolMeta = poolMetas[0];\n    disablePool = false;\n  }\n\n  const { currentPoolIndex, totalPoolShares } = poolMeta;\n\n  const poolShareValue = getShareValue(totalPoolShares, poolValue);\n\n  return (\n    <div id=\"homepage\">\n      <Grid container verticalAlign=\"middle\" textAlign=\"center\">\n        <Grid container doubling stackable columns=\"equal\" verticalAlign=\"bottom\">\n          <Grid.Column>\n            <Statistic inverted>\n              <Statistic.Label>Moloch Pool Value</Statistic.Label>\n              <Statistic.Value>{convertWeiToDollars(poolValue, exchangeRate)}</Statistic.Value>\n            </Statistic>\n          </Grid.Column>\n          <Grid.Column width={9}>\n            <Grid container stackable columns={3}>\n              <Grid.Column>\n                <NumMembers disabled={disablePool} />\n              </Grid.Column>\n              <Grid.Column>\n                <Donate\n                  token={token}\n                  molochPool={molochPool}\n                  loggedInUser={loggedInUser}\n                  disabled={!loggedInUser || disablePool}\n                />\n              </Grid.Column>\n              <Grid.Column>\n                <Sync\n                  lastProcessedProposalIndex={lastProcessedProposal ? lastProcessedProposal.proposalIndex : 0}\n                  currentPoolIndex={currentPoolIndex}\n                  molochPool={molochPool}\n                  loggedInUser={loggedInUser}\n                  disabled={disablePool}\n                />\n              </Grid.Column>\n            </Grid>\n          </Grid.Column>\n        </Grid>\n\n        <Grid container stackable columns={3} className=\"blurred box\">\n          <Grid.Column textAlign=\"center\">\n            <Statistic inverted label=\"Total Pool Shares\" value={totalPoolShares} />\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <Statistic\n              inverted\n              label=\"Total Pool ETH\"\n              value={parseFloat(utils.formatEther(poolValue)).toFixed(2)}\n            />\n          </Grid.Column>\n          <Grid.Column textAlign=\"center\">\n            <Statistic\n              inverted\n              label=\"Pool Share Value\"\n              value={convertWeiToDollars(poolShareValue, exchangeRate)}\n            />\n          </Grid.Column>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Grid, Image, Divider } from \"semantic-ui-react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport MemberDetail from \"./MemberDetail\";\nimport bull from \"assets/bull.png\";\nimport hood from \"assets/hood.png\";\n\nimport { useQuery } from \"react-apollo\";\nimport { GET_POOL_MEMBER_DETAIL } from \"../helpers/graphQlQueries\";\nimport gql from \"graphql-tag\";\n\nimport ProfileHover from \"profile-hover\";\n\nconst MemberAvatar = ({ address, shares }) => (\n  <Grid.Column\n    mobile={5}\n    tablet={3}\n    computer={3}\n    textAlign=\"center\"\n    className=\"member_avatar\"\n    title={address}\n  >\n    <ProfileHover address={address} noTheme>\n      <Link to={`/members/${address}`} className=\"uncolored\">\n        <Image src={hood} centered size=\"tiny\" />\n        <p className=\"name\">\n          {!address ? \"\" : address.length > 10 ? address.substring(0, 10) + \"...\" : address}\n        </p>\n        <p className=\"subtext\">{shares} shares</p>\n      </Link>\n    </ProfileHover>\n  </Grid.Column>\n);\n\nconst LoggedInUser = props => {\n  const { loading, error, data } = useQuery(GET_POOL_MEMBER_DETAIL, {\n    variables: { address: props.loggedInUser },\n  });\n  if (loading) return \"...\";\n  if (error) throw new Error(`Error!: ${error}`);\n  return data.member ? (\n    <Link to={`/members/${data.member.id}`} className=\"uncolored\">\n      <Image centered src={bull} size=\"tiny\" />\n      <p className=\"name\">\n        {!data.member.id\n          ? \"\"\n          : data.member.id.length > 10\n          ? data.member.id.substring(0, 10) + \"...\"\n          : data.member.id}\n      </p>\n      <p className=\"subtext\">{data.member.shares ? data.member.shares : 0} shares</p>\n    </Link>\n  ) : (\n    <div />\n  );\n};\n\nconst GET_POOL_MEMBERS = gql`\n  {\n    poolMembers(where: { shares_gt: 0 }, first: 100, orderBy: shares, orderDirection: desc) {\n      id\n      shares\n      keepers\n    }\n  }\n`;\n\nconst PoolMemberList = props => {\n  const { loading, error, data } = useQuery(GET_POOL_MEMBERS);\n  let members;\n  if (error) {\n    members = \"NA\";\n    console.error(`Could not load members: ${error}`);\n  } else if (loading) {\n    members = \"-\";\n  } else {\n    members = data.poolMembers ? data.poolMembers.length : 0;\n  }\n  return (\n    <div id=\"member_list\">\n      <Grid columns={16} verticalAlign=\"middle\">\n        <Grid.Column\n          mobile={16}\n          tablet={6}\n          computer={6}\n          textAlign=\"left\"\n          className=\"member_list_header\"\n        >\n          <p className=\"subtext\">{members} Members</p>\n        </Grid.Column>\n      </Grid>\n\n      <Grid>\n        <Grid.Column textAlign=\"center\">\n          <LoggedInUser {...props} />\n        </Grid.Column>\n      </Grid>\n      <Grid className=\"member_item\">\n        <Grid.Row>\n          <p style={{ paddingLeft: \"1rem\" }}>Pool Members</p>\n        </Grid.Row>\n        <Divider />\n        <Grid.Row className=\"members_row\" centered>\n          {data && data.poolMembers && data.poolMembers.length > 0 ? (\n            data.poolMembers.map((elder, idx) => (\n              <MemberAvatar address={elder.id} shares={elder.shares} key={idx} />\n            ))\n          ) : (\n            <>No pool members to show.</>\n          )}\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nconst PoolMemberListView = higherProps => (\n  <Switch>\n    <Route\n      exact\n      path=\"/pool-members\"\n      render={props => <PoolMemberList {...props} loggedInUser={higherProps.loggedInUser} />}\n    />\n    <Route\n      path=\"/pool-members/:name\"\n      render={props => <MemberDetail {...props} loggedInUser={higherProps.loggedInUser} />}\n    />\n  </Switch>\n);\n\nexport default PoolMemberListView;\n","import React from \"react\";\nimport { Segment, Grid, Button, Tab, Icon, Loader } from \"semantic-ui-react\";\nimport { Route, Switch, Link } from \"react-router-dom\";\n\nimport ProposalDetail from \"./ProposalDetail\";\nimport ProgressBar from \"./ProgressBar\";\nimport { useQuery } from \"react-apollo\";\nimport { ProposalStatus, getProposalCountdownText } from \"../helpers/proposals\";\nimport { utils } from \"ethers\";\nimport gql from \"graphql-tag\";\nimport { getShareValue } from \"helpers/currency\";\n\nconst ProposalCard = ({ proposal }) => {\n  let id = proposal.id;\n\n  return (\n    <Grid.Column mobile={16} tablet={8} computer={5}>\n      <Link to={{ pathname: `/proposals/${id}` }} className=\"uncolored\">\n        <Segment className=\"blurred box\">\n          <p className=\"name\">{proposal.title ? proposal.title : \"N/A\"}</p>\n          <p className=\"subtext description\">\n            {proposal.description ? proposal.description : \"N/A\"}\n          </p>\n          <Grid columns=\"equal\" className=\"value_shares\">\n            <Grid.Row>\n              <Grid.Column textAlign=\"center\">\n                <p className=\"subtext\">Shares Requested</p>\n                <p className=\"amount\">{proposal.sharesRequested}</p>\n              </Grid.Column>\n              <Grid.Column textAlign=\"center\">\n                <p className=\"subtext\">\n                  Tribute <Icon name=\"ethereum\" />\n                </p>\n                <p className=\"amount\">\n                  {parseFloat(utils.formatEther(proposal.tokenTribute)).toFixed(2)}\n                </p>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns=\"equal\" className=\"deadlines\">\n            <Grid.Row>\n              <Grid.Column textAlign=\"center\">\n                <Segment className=\"voting pill\" textAlign=\"center\">\n                  {getProposalCountdownText(proposal)}\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          {proposal.aborted ? (\n            <Grid columns=\"equal\" className=\"deadlines\">\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  <p className=\"amount\">Aborted</p>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          ) : (\n            <ProgressBar yes={proposal.yesShares} no={proposal.noShares} />\n          )}\n        </Segment>\n      </Link>\n    </Grid.Column>\n  );\n};\n\nconst GET_COMPLETED_PROPOSAL_LIST = gql`\n  query Feed($offset: Int, $limit: Int) {\n    proposals(\n      first: $limit\n      skip: $offset\n      orderBy: proposalIndex\n      orderDirection: desc\n      where: { processed: true }\n    ) {\n      id\n      timestamp\n      tokenTribute\n      sharesRequested\n      processed\n      didPass\n      aborted\n      yesVotes\n      noVotes\n      yesShares\n      noShares\n      proposalIndex\n      votes(first: 100) {\n        member {\n          shares\n        }\n        uintVote\n      }\n      details\n      startingPeriod\n      processed\n      status @client\n      title @client\n      description @client\n      gracePeriod @client\n      votingEnds @client\n      votingStarts @client\n      readyForProcessing @client\n    }\n  }\n`;\n\nconst GET_ACTIVE_PROPOSAL_LIST = gql`\n  {\n    proposals(\n      first: 100\n      orderBy: proposalIndex\n      orderDirection: desc\n      where: { processed: false }\n    ) {\n      id\n      timestamp\n      tokenTribute\n      sharesRequested\n      processed\n      didPass\n      aborted\n      yesVotes\n      noVotes\n      yesShares\n      noShares\n      proposalIndex\n      votes(first: 100) {\n        member {\n          shares\n        }\n        uintVote\n      }\n      details\n      startingPeriod\n      processed\n      status @client\n      title @client\n      description @client\n      gracePeriod @client\n      votingEnds @client\n      votingStarts @client\n      readyForProcessing @client\n    }\n    exchangeRate @client\n    totalShares @client\n    guildBankValue @client\n    currentPeriod @client\n  }\n`;\n\nlet finishedLoadingRecords = false;\nconst ProposalList = ({ isActive }) => {\n  const { loading, error, data } = useQuery(GET_ACTIVE_PROPOSAL_LIST);\n  const {\n    loading: completedLoading,\n    error: completedError,\n    data: completedData,\n    fetchMore: completedFetchMore,\n  } = useQuery(GET_COMPLETED_PROPOSAL_LIST, {\n    variables: {\n      offset: 0,\n      limit: 100,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  if (loading) return <Loader size=\"massive\" active />;\n  if (error) throw new Error(error);\n  if (completedError) throw new Error(completedError);\n  const { proposals, exchangeRate, totalShares, guildBankValue } = data;\n  const shareValue = getShareValue(totalShares, guildBankValue);\n\n  let completedProposals = [];\n  if (!completedLoading) {\n    completedProposals = completedData.proposals;\n    if (!finishedLoadingRecords) {\n      console.log(\n        `Loading more completed proposal records... offset: ${completedData.proposals.length}`,\n      );\n      completedFetchMore({\n        variables: {\n          offset: completedData.proposals.length,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          console.log(\n            `fetchMoreResult.proposals.length: ${fetchMoreResult.proposals.length}, prev.proposals.length: ${prev.proposals.length}`,\n          );\n          if (fetchMoreResult.proposals.length === 0) {\n            console.log(`Finished loading`);\n            finishedLoadingRecords = true;\n          }\n          return Object.assign({}, prev, {\n            proposals: [...prev.proposals, ...fetchMoreResult.proposals],\n          });\n        },\n      });\n    }\n  }\n\n  // sort in descending order of index\n  const sortProposals = (a, b) => b.proposalIndex - a.proposalIndex;\n\n  const gracePeriod = proposals\n    .filter(p => p.status === ProposalStatus.GracePeriod)\n    .sort(sortProposals);\n  const votingPeriod = proposals\n    .filter(p => p.status === ProposalStatus.VotingPeriod)\n    .sort(sortProposals);\n  const inQueue = proposals.filter(p => p.status === ProposalStatus.InQueue).sort(sortProposals);\n  const readyForProcessing = proposals\n    .filter(p => p.status === ProposalStatus.ReadyForProcessing)\n    .sort(sortProposals);\n\n  const panes = [\n    {\n      menuItem: `Voting Period (${votingPeriod.length})`,\n      render: () => (\n        <Tab.Pane attached={false}>\n          <Grid columns={3}>\n            {votingPeriod.map((p, index) => (\n              <ProposalCard\n                exchangeRate={exchangeRate}\n                shareValue={shareValue}\n                totalShares={+totalShares}\n                proposal={p}\n                key={index}\n              />\n            ))}\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: `Grace Period (${gracePeriod.length})`,\n      render: () => (\n        <Tab.Pane attached={false}>\n          <Grid columns={3}>\n            {gracePeriod.map((p, index) => (\n              <ProposalCard\n                exchangeRate={exchangeRate}\n                shareValue={shareValue}\n                totalShares={+totalShares}\n                proposal={p}\n                key={index}\n              />\n            ))}\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: `Ready For Processing (${readyForProcessing.length})`,\n      render: () => (\n        <Tab.Pane attached={false}>\n          <Grid columns={3}>\n            {readyForProcessing.map((p, index) => (\n              <ProposalCard\n                exchangeRate={exchangeRate}\n                shareValue={shareValue}\n                totalShares={+totalShares}\n                proposal={p}\n                key={index}\n              />\n            ))}\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: `In Queue (${inQueue.length})`,\n      render: () => (\n        <Tab.Pane attached={false}>\n          <Grid columns={3}>\n            {inQueue.map((p, index) => (\n              <ProposalCard\n                exchangeRate={exchangeRate}\n                shareValue={shareValue}\n                totalShares={+totalShares}\n                proposal={p}\n                key={index}\n              />\n            ))}\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: `Completed (${completedLoading ? \"...\" : completedProposals.length})`,\n      render: () => (\n        <Tab.Pane attached={false}>\n          {completedLoading ? (\n            <Loader size=\"massive\" active />\n          ) : (\n            <Grid columns={3}>\n              {completedProposals.map((p, index) => (\n                <ProposalCard\n                  exchangeRate={exchangeRate}\n                  shareValue={shareValue}\n                  totalShares={+totalShares}\n                  proposal={p}\n                  key={index}\n                />\n              ))}\n            </Grid>\n          )}\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  return (\n    <div id=\"proposal_list\">\n      <>\n        <Grid columns={16} verticalAlign=\"middle\">\n          <Grid.Column\n            mobile={16}\n            tablet={8}\n            computer={4}\n            textAlign=\"right\"\n            floated=\"right\"\n            className=\"submit_button\"\n          >\n            <Link to={isActive ? \"/proposalsubmission\" : \"/proposals\"} className=\"link\">\n              <Button size=\"large\" color=\"red\" disabled={!isActive}>\n                New Proposal\n              </Button>\n            </Link>\n          </Grid.Column>\n        </Grid>\n        <Tab menu={{ secondary: true, pointing: true }} panes={panes} />\n      </>\n    </div>\n  );\n};\n\nconst GET_MEMBER_BY_DELEGATE_KEY = gql`\n  query Member($delegateKey: String!) {\n    members(where: { delegateKey: $delegateKey }) {\n      id\n      shares\n      isActive\n      tokenTribute\n      delegateKey\n    }\n    exchangeRate @client\n    totalShares @client\n    guildBankValue @client\n    currentPeriod @client\n    proposalQueueLength @client\n  }\n`;\n\nconst ProposalListView = ({ loggedInUser }) => {\n  const { loading, error, data } = useQuery(GET_MEMBER_BY_DELEGATE_KEY, {\n    variables: { delegateKey: loggedInUser },\n  });\n  if (loading) return <Loader size=\"massive\" active />;\n  if (error) throw new Error(error);\n  const member = data.members.length > 0 ? data.members[0] : null;\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/proposals\"\n        render={props => <ProposalList {...props} isActive={member ? member.isActive : false} />}\n      />\n      <Route\n        path=\"/proposals/:id\"\n        render={props => <ProposalDetail {...props} loggedInUser={loggedInUser} />}\n      />\n    </Switch>\n  );\n};\n\nexport default ProposalListView;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Divider,\n  Form,\n  Grid,\n  Input,\n  Segment,\n  Modal,\n  Header,\n  Icon,\n  List,\n} from \"semantic-ui-react\";\nimport { getMoloch, getToken } from \"../web3\";\nimport { utils } from \"ethers\";\nimport { monitorTx } from \"helpers/transaction\";\n\nconst DEPOSIT_WETH = process.env.REACT_APP_DEPOSIT_WETH || \"10\";\n\nclass SubmitModal extends Component {\n  state = {\n    loading: true,\n    beneficiaryApproved: false,\n    depositApproved: false,\n    open: false,\n  };\n\n  handleOpen = async () => {\n    const { token, address, tribute, moloch, loggedInUser, valid } = this.props;\n    if (!valid) {\n      alert(\"Please fill any missing fields.\");\n      return;\n    }\n    this.setState({\n      open: true,\n    });\n\n    const beneficiaryAllowance = await token.allowance(address, moloch.address);\n    let beneficiaryApproved = false;\n    if (beneficiaryAllowance.gte(utils.parseEther(tribute))) {\n      beneficiaryApproved = true;\n    }\n\n    const depositAllowance = await token.allowance(loggedInUser, moloch.address);\n    let depositApproved = false;\n    if (depositAllowance.gte(utils.parseEther(DEPOSIT_WETH))) {\n      depositApproved = true;\n    }\n\n    this.setState({\n      beneficiaryApproved,\n      depositApproved,\n      loading: false,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false,\n    });\n  };\n\n  render() {\n    const { loading, beneficiaryApproved, depositApproved, open } = this.state;\n    const { handleSubmit, submittedTx } = this.props;\n    return (\n      <Modal\n        trigger={\n          <Button size=\"large\" color=\"red\" onClick={this.handleOpen}>\n            Submit Proposal\n          </Button>\n        }\n        basic\n        size=\"small\"\n        open={open}\n      >\n        <Header icon=\"send\" content=\"Submit Proposal\" />\n        <Modal.Content>\n          <List>\n            <List.Item>\n              {loading ? (\n                <List.Icon name=\"time\" />\n              ) : depositApproved ? (\n                <List.Icon name=\"check circle\" />\n              ) : (\n                <List.Icon name=\"x\" />\n              )}\n              <List.Content>{DEPOSIT_WETH} wETH Deposit Approved</List.Content>\n            </List.Item>\n            <List.Item>\n              {loading ? (\n                <List.Icon name=\"time\" />\n              ) : beneficiaryApproved ? (\n                <List.Icon name=\"check circle\" />\n              ) : (\n                <List.Icon name=\"x\" />\n              )}\n              <List.Content>Tribute Approved By Beneficiary</List.Content>\n            </List.Item>\n            <List.Item>\n              {submittedTx ? <List.Icon name=\"code\" /> : <></>}\n              <List.Content>\n                {submittedTx ? (\n                  <a\n                    href={`https://etherscan.io/tx/${submittedTx.hash}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    View Transaction on Etherscan\n                  </a>\n                ) : (\n                  <></>\n                )}\n              </List.Content>\n            </List.Item>\n          </List>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            basic\n            color=\"green\"\n            inverted\n            onClick={handleSubmit}\n            disabled={submittedTx || !depositApproved || !beneficiaryApproved}\n          >\n            <Icon name=\"check\" /> Submit\n          </Button>\n          <Button basic color=\"red\" inverted onClick={this.handleClose}>\n            <Icon name=\"remove\" /> Close\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default class ProposalSubmission extends Component {\n  state = {\n    address: \"\",\n    title: \"\",\n    description: \"\",\n    shares: \"\",\n    tribute: \"\", // TODO: this will be calculated with the blockchain\n    fieldValidationErrors: { title: \"\", description: \"\", assets: \"\", shares: \"\" },\n    titleValid: false,\n    descriptionValid: false,\n    tributeValid: false,\n    sharesValid: false,\n    addressValid: false,\n    formValid: false,\n  };\n\n  async componentDidMount() {\n    const { loggedInUser } = this.props;\n    const moloch = await getMoloch(loggedInUser);\n    const token = await getToken(loggedInUser);\n    this.setState({\n      moloch,\n      token,\n    });\n  }\n\n  validateField = (fieldName, value) => {\n    let {\n      fieldValidationErrors,\n      titleValid,\n      descriptionValid,\n      tributeValid,\n      sharesValid,\n      addressValid,\n    } = this.state;\n\n    switch (fieldName) {\n      case \"title\":\n        titleValid = value && value !== \"\";\n        fieldValidationErrors.title = titleValid ? \"\" : \"Title is invalid\";\n        break;\n      case \"address\":\n        addressValid = utils.isHexString(value);\n        console.log(\"utils.isHexString(value): \", utils.isHexString(value));\n        console.log(\"value: \", value);\n        fieldValidationErrors.address = addressValid ? \"\" : \"Address is invalid\";\n        break;\n      case \"description\":\n        descriptionValid = value !== \"\";\n        fieldValidationErrors.description = descriptionValid ? \"\" : \"Description is invalid\";\n        break;\n      case \"shares\":\n        sharesValid = value > 0;\n        fieldValidationErrors.shares = sharesValid ? \"\" : \"Shares is invalid\";\n        break;\n      case \"tribute\":\n        tributeValid = value >= 0;\n        fieldValidationErrors.tribute = tributeValid ? \"\" : \"Tribute is invalid\";\n        break;\n      default:\n        break;\n    }\n    this.setState(\n      {\n        fieldValidationErrors,\n        titleValid,\n        descriptionValid,\n        tributeValid,\n        sharesValid,\n        addressValid,\n      },\n      this.validateForm,\n    );\n  };\n\n  validateForm = () => {\n    const { titleValid, descriptionValid, sharesValid, tributeValid, addressValid } = this.state;\n    this.setState({\n      formValid: titleValid && descriptionValid && sharesValid && tributeValid && addressValid,\n    });\n  };\n\n  handleInput = event => {\n    let name = event.target.name;\n    let value = event.target.value;\n    this.setState({ [event.target.name]: event.target.value }, () => {\n      this.validateField(name, value);\n    });\n  };\n\n  handleSubmit = async () => {\n    const { moloch, address, title, description, shares, tribute } = this.state;\n\n    let submittedTx;\n    try {\n      console.log(\n        \"Submitting proposal: \",\n        address,\n        utils.parseEther(tribute).toString(),\n        shares,\n        JSON.stringify({ title, description }),\n      );\n      monitorTx(\n        moloch.submitProposal(\n          address,\n          utils.parseEther(tribute),\n          shares,\n          JSON.stringify({ title, description }),\n        ),\n      );\n    } catch (e) {\n      console.error(e);\n      alert(\"Error processing proposal\");\n    }\n\n    this.setState({\n      submittedTx,\n    });\n  };\n\n  render() {\n    const {\n      shares,\n      tribute,\n      title,\n      description,\n      address,\n      token,\n      formValid,\n      moloch,\n      titleValid,\n      descriptionValid,\n      sharesValid,\n      tributeValid,\n      addressValid,\n      submittedTx,\n    } = this.state;\n    const { loggedInUser } = this.props;\n    return (\n      <div id=\"proposal_submission\">\n        <Form>\n          <Grid centered columns={16}>\n            <Grid.Row stretched>\n              <Grid.Column mobile={16} tablet={16} computer={12}>\n                <Input\n                  name=\"title\"\n                  transparent\n                  size=\"big\"\n                  inverted\n                  placeholder=\"Proposal Title\"\n                  onChange={this.handleInput}\n                  value={title}\n                  error={!titleValid}\n                />\n                <Divider />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n              <Grid.Column mobile={16} tablet={16} computer={12}>\n                <Segment className=\"blurred box\">\n                  <Form.Input\n                    name=\"address\"\n                    label=\"Beneficiary or Applicant\"\n                    placeholder=\"Address\"\n                    fluid\n                    onChange={this.handleInput}\n                    value={address}\n                    error={!addressValid}\n                  />\n                  <Form.Input\n                    name=\"shares\"\n                    label=\"Shares Requested\"\n                    placeholder=\"Shares\"\n                    fluid\n                    type=\"number\"\n                    onChange={this.handleInput}\n                    value={shares}\n                    error={!sharesValid}\n                  />\n                  <Form.Input\n                    name=\"tribute\"\n                    label=\"Tribute Offered (in ETH)\"\n                    placeholder=\"ETH\"\n                    fluid\n                    type=\"number\"\n                    onChange={this.handleInput}\n                    value={tribute}\n                    error={!tributeValid}\n                  />\n                </Segment>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column mobile={16} tablet={16} computer={12}>\n                <Grid columns=\"equal\">\n                  <Grid.Column>\n                    <Segment className=\"blurred box\">\n                      <Form.TextArea\n                        name=\"description\"\n                        label=\"Description\"\n                        placeholder=\"Type here\"\n                        rows={15}\n                        onChange={this.handleInput}\n                        value={description}\n                        error={!descriptionValid}\n                      />\n                    </Segment>\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column mobile={16} tablet={8} computer={8} className=\"submit_button\">\n                {/* <Button size=\"large\" color=\"red\" onClick={this.handleSubmit}>\n                  Submit Proposal\n                </Button> */}\n                <SubmitModal\n                  valid={formValid}\n                  tribute={tribute}\n                  address={address}\n                  token={token}\n                  moloch={moloch}\n                  loggedInUser={loggedInUser}\n                  handleSubmit={this.handleSubmit}\n                  submittedTx={submittedTx}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst Wrapper = ({ children }) => <div id=\"wrapper\">{children}</div>;\nexport default Wrapper;\n","import {\n  determineProposalStatus,\n  inGracePeriod,\n  VOTING_PERIOD_LENGTH,\n  GRACE_PERIOD_LENGTH,\n  inVotingPeriod,\n  inQueue,\n  passedVotingAndGrace,\n} from \"./helpers/proposals\";\nimport gql from \"graphql-tag\";\nimport { GET_METADATA } from \"./helpers/graphQlQueries\";\nimport { getToken, getMoloch, getMedianizer, getMolochPool } from \"./web3\";\nimport { bigNumberify } from \"ethers/utils\";\n\nexport const resolvers = {\n  Query: {\n    guildBankValue: async () => {\n      const token = await getToken();\n      const value = (await token.balanceOf(process.env.REACT_APP_GUILD_BANK_ADDRESS)).toString();\n      return value;\n    },\n    totalShares: async () => {\n      const moloch = await getMoloch();\n      const shares = (await moloch.totalShares()).toString();\n      return shares;\n    },\n    currentPeriod: async () => {\n      const moloch = await getMoloch();\n      const period = (await moloch.getCurrentPeriod()).toString();\n      return period;\n    },\n    exchangeRate: async () => {\n      const medianizer = await getMedianizer();\n      const rate = (await medianizer.compute())[0];\n      return bigNumberify(rate).toString();\n    },\n    proposalQueueLength: async () => {\n      const moloch = await getMoloch();\n      const length = (await moloch.getProposalQueueLength()).toString();\n      return length;\n    },\n    totalPoolShares: async () => {\n      const molochPool = await getMolochPool();\n      const shares = (await molochPool.totalPoolShares()).toString();\n      return shares;\n    },\n    poolValue: async () => {\n      const token = await getToken();\n      const value = (await token.balanceOf(process.env.REACT_APP_MOLOCH_POOL_ADDRESS)).toString();\n      return value;\n    },\n  },\n  Proposal: {\n    status: (proposal, _args, { cache }) => {\n      const { currentPeriod } = cache.readQuery({ query: GET_METADATA });\n      return determineProposalStatus(proposal, +currentPeriod);\n    },\n    title: proposal => {\n      try {\n        const details = JSON.parse(proposal.details);\n        if (details.title === \"\") {\n          return \"N/A\";\n        }\n        return details.title || proposal.details || \"\";\n      } catch (e) {\n        // special cases for malformed proposals, remove this once proposal is stale\n        if (\n          proposal.details ===\n          \"{\title:Member Proposal: DCInvestor,description:https://paper.dropbox.com/doc/MGP3-ETH2.0-Test-Runner--AcFiUF_av4SF5CHOuS4qSH0WAg-DZu4VRgbP1LZeUimS1k3L}\"\n        ) {\n          return \"Moloch Grant Proposal: ETH 2.0 Test Runner\";\n        }\n        if (\n          proposal.details ===\n          \"{title:Member Proposal: Anon,description:https://etherpad.net/p/anon_moloch_proposal}\"\n        ) {\n          return \"Member Proposal: Anon\";\n        }\n        console.log(\n          `Could not parse title from proposal.proposalIndex: ${proposal.proposalIndex} proposal.details: ${proposal.details}`,\n        );\n        return proposal.details || \"\";\n      }\n    },\n    description: proposal => {\n      try {\n        const details = JSON.parse(proposal.details);\n        return details.description || \"\";\n      } catch (e) {\n        if (\n          proposal.details ===\n          \"{\title:Member Proposal: DCInvestor,description:https://paper.dropbox.com/doc/MGP3-ETH2.0-Test-Runner--AcFiUF_av4SF5CHOuS4qSH0WAg-DZu4VRgbP1LZeUimS1k3L}\"\n        ) {\n          return \"https://paper.dropbox.com/doc/MGP3-ETH2.0-Test-Runner--AcFiUF_av4SF5CHOuS4qSH0WAg-DZu4VRgbP1LZeUimS1k3L\";\n        }\n        if (\n          proposal.details ===\n          \"{title:Member Proposal: Anon,description:https://etherpad.net/p/anon_moloch_proposal}\"\n        ) {\n          return \"https://paper.dropbox.com/doc/Moloch-Membership-Proposal-Anon--AikVeiZ0g9W9RmVffxagvno1AQ-9iJOOAxRinM6KwWWKSJpG\";\n        }\n        console.log(\n          `Could not parse description from proposal.proposalIndex: ${proposal.proposalIndex} proposal.details: ${proposal.details}`,\n        );\n        return \"\";\n      }\n    },\n    gracePeriod: (proposal, _args, { cache }) => {\n      const { currentPeriod } = cache.readQuery({ query: GET_METADATA });\n      if (inGracePeriod(proposal, currentPeriod)) {\n        return (\n          +proposal.startingPeriod + VOTING_PERIOD_LENGTH + GRACE_PERIOD_LENGTH - currentPeriod\n        );\n      }\n      return 0;\n    },\n    votingEnds: (proposal, _args, { cache }) => {\n      const { currentPeriod } = cache.readQuery({ query: GET_METADATA });\n      if (inVotingPeriod(proposal, currentPeriod)) {\n        return proposal.startingPeriod + VOTING_PERIOD_LENGTH - currentPeriod;\n      }\n      return 0;\n    },\n    votingStarts: (proposal, _args, { cache }) => {\n      const { currentPeriod } = cache.readQuery({ query: GET_METADATA });\n      if (inQueue(proposal, currentPeriod)) {\n        return proposal.startingPeriod - currentPeriod;\n      }\n      return 0;\n    },\n    readyForProcessing: (proposal, _args, { cache }) => {\n      const { currentPeriod } = cache.readQuery({ query: GET_METADATA });\n      if (passedVotingAndGrace(proposal, currentPeriod) && !proposal.processed) {\n        return true;\n      }\n      return false;\n    },\n  },\n  Mutation: {\n    setAttributes: (_, variables, { cache }) => {\n      const id = `Proposal:${variables.id}`;\n      const fragment = gql`\n        fragment getMeta on Proposal {\n          status\n          title\n          description\n          gracePeriod\n          votingEnds\n          votingStarts\n          readyForProcessing\n        }\n      `;\n      const proposal = cache.readFragment({ fragment, id });\n      const data = {\n        ...proposal,\n        status: variables.status,\n        title: variables.title,\n        description: variables.description,\n        gracePeriod: variables.gracePeriod,\n        votingEnds: variables.votingEnds,\n        votingStarts: variables.votingStarts,\n        readyForProcessing: variables.readyForProcessing,\n      };\n      cache.writeData({ id, data });\n      return data;\n    },\n  },\n};\n","import gql from \"graphql-tag\";\n\nexport const typeDefs = gql`\n  extend type Proposal {\n    status: String\n    title: String\n    description: String\n    gracePeriod: Number\n    votingEnds: Number\n    votingStarts: Number\n    readyForProcessing: Bool\n  }\n\n  extend type Query {\n    proposalsWithStatus: [Proposal]\n    guildBankValue: String\n    totalShares: String\n    currentPeriod: String\n    exchangeRate: String\n    proposalQueueLength: String\n    totalPoolShares: String\n    poolValue: String\n  }\n`;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { HttpLink, ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport gql from \"graphql-tag\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ToastMessage } from \"rimble-ui\";\nimport { Dimmer, Loader, Grid, Menu, Container, Responsive } from \"semantic-ui-react\";\n\nimport Background from \"./components/Background\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\nimport MemberList from \"./components/MemberList\";\nimport Pool from \"./components/Pool\";\nimport PoolMemberListView from \"./components/PoolMemberList\";\nimport ProposalList from \"./components/ProposalList\";\nimport ProposalSubmission from \"./components/ProposalSubmission\";\nimport Wrapper from \"./components/Wrapper\";\nimport { resolvers } from \"./resolvers\";\nimport { typeDefs } from \"./schema\";\nimport { initWeb3 } from \"./web3\";\n\nconsole.log(process.env);\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache,\n  link: new HttpLink({\n    uri: process.env.REACT_APP_GRAPH_NODE_URI,\n  }),\n  resolvers,\n  typeDefs,\n  connectToDevTools: true,\n});\n\ncache.writeData({\n  data: { loggedInUser: window.localStorage.getItem(\"loggedInUser\") || \"\" },\n});\nclient.onResetStore(() => cache.writeData({ data: { loggedInUser: \"\" } }));\n\nconst IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    loggedInUser @client\n  }\n`;\n\nclass BottomMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuSize: 'huge'\n    };\n  }\n  \n  componentDidMount() {\n    this.handleOnScreenUpdated();\n  }\n\n  handleOnScreenUpdated () {\n    const viewportWidth = window.innerWidth || document.documentElement.clientWidth;\n    this.setState((prevState) => ({\n      menuSize: viewportWidth > 640 ? 'huge' : 'small',\n    }))\n  }\n\n  render() {\n    return (\n      <Responsive onUpdate={() => this.handleOnScreenUpdated}>\n        <Menu fixed='bottom' size={this.state.menuSize} inverted widths={4}>\n          <Container>\n            <Menu.Item as={Link} header to='/'>一本DAO</Menu.Item>\n            <Menu.Item as={Link} to='/members'>Members</Menu.Item>\n            <Menu.Item as={Link} to='/proposals'>Proposals</Menu.Item>\n            <Menu.Item as={Link} to='/pool'>Pool</Menu.Item>\n          </Container>\n        </Menu>\n      </Responsive>\n    );\n  }\n}\n\nconst Routes = () => {\n  const { loading, error, data } = useQuery(IS_LOGGED_IN);\n  if (loading) {\n    return (\n      <Dimmer active>\n        <Loader size=\"massive\" />\n      </Dimmer>\n    );\n  }\n\n  if (error) throw new Error(error);\n\n  const { loggedInUser } = data;\n  return (\n    <>\n      <Background />\n      <Grid container>\n        <Grid.Row>\n          <Header loggedInUser={loggedInUser} client={client} />\n        </Grid.Row>\n        <Grid.Row>\n          <Wrapper>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={props => <Home {...props} loggedInUser={loggedInUser} />}\n              />\n              <Route\n                path=\"/proposals\"\n                render={props => <ProposalList {...props} loggedInUser={loggedInUser} />}\n              />\n              <Route\n                path=\"/members\"\n                render={props => <MemberList {...props} loggedInUser={loggedInUser} />}\n              />\n              <Route\n                path=\"/proposalsubmission\"\n                render={props =>\n                  loggedInUser ? (\n                    <ProposalSubmission {...props} loggedInUser={loggedInUser} />\n                  ) : (\n                    <Redirect to={{ pathname: \"/\" }} />\n                  )\n                }\n              />\n              <Route\n                path=\"/pool\"\n                component={props => <Pool {...props} loggedInUser={loggedInUser} />}\n              />\n              <Route\n                path=\"/pool-members\"\n                render={props => <PoolMemberListView {...props} loggedInUser={loggedInUser} />}\n              />\n              <Route component={props => <Home {...props} loggedInUser={loggedInUser} />} />\n            </Switch>\n          </Wrapper>\n        </Grid.Row>\n      </Grid>\n      <BottomMenu />\n      <ToastMessage.Provider ref={node => (window.toastProvider = node)} />\n    </>\n  );\n};\n\nconst App = () => {\n  const [restored, setRestored] = useState(false);\n  useEffect(() => {\n    async function init() {\n      try {\n        let {\n          data: { loggedInUser },\n        } = await client.query({\n          query: IS_LOGGED_IN,\n        });\n\n        // make sure logged in metamask user is the one that's saved to storage\n        if (loggedInUser && client) {\n          await initWeb3(client, loggedInUser);\n        }\n      } catch (err) {\n        console.error(err);\n        window.localStorage.setItem(\"loggedInUser\", \"\");\n        await client.resetStore();\n        // window.location.reload();\n      } finally {\n        setRestored(true);\n      }\n    }\n    init();\n  }, []);\n\n  return restored ? (\n    <ApolloProvider client={client}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Routes />\n      </Router>\n    </ApolloProvider>\n  ) : (\n    <>\n      <Background />\n      <Dimmer active>\n        <Loader size=\"massive\" />\n      </Dimmer>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport './index.scss';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/hood.ba69d28c.png\";"],"sourceRoot":""}